// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	DataRequest
	FromIndex
	PutResponse
	DelResponse
	ResyncResponse
	NotificationsResponse
*/
package rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import acl "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/acl"
import bfd "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/bfd"
import interfaces "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/interfaces"
import l2 "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/l2"
import l3 "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/l3"
import l4 "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/l4"
import nat "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/nat"
import stn "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/stn"
import interfaces1 "github.com/ligato/vpp-agent/plugins/linuxplugin/common/model/interfaces"
import l31 "github.com/ligato/vpp-agent/plugins/linuxplugin/common/model/l3"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Data request is an inventory of supported data types with one or multiple
// items of every type. Universal type for every data change/resync request
type DataRequest struct {
	// Defaultplugins
	AccessLists           []*acl.AccessLists_Acl                 `protobuf:"bytes,10,rep,name=AccessLists" json:"AccessLists,omitempty"`
	Interfaces            []*interfaces.Interfaces_Interface     `protobuf:"bytes,20,rep,name=Interfaces" json:"Interfaces,omitempty"`
	BfdSessions           []*bfd.SingleHopBFD_Session            `protobuf:"bytes,30,rep,name=BfdSessions" json:"BfdSessions,omitempty"`
	BfdAuthKeys           []*bfd.SingleHopBFD_Key                `protobuf:"bytes,31,rep,name=BfdAuthKeys" json:"BfdAuthKeys,omitempty"`
	BfdEchoFunction       *bfd.SingleHopBFD_EchoFunction         `protobuf:"bytes,32,opt,name=BfdEchoFunction" json:"BfdEchoFunction,omitempty"`
	BridgeDomains         []*l2.BridgeDomains_BridgeDomain       `protobuf:"bytes,40,rep,name=BridgeDomains" json:"BridgeDomains,omitempty"`
	FIBs                  []*l2.FibTable_FibEntry                `protobuf:"bytes,41,rep,name=FIBs" json:"FIBs,omitempty"`
	XCons                 []*l2.XConnectPairs_XConnectPair       `protobuf:"bytes,42,rep,name=XCons" json:"XCons,omitempty"`
	StaticRoutes          []*l3.StaticRoutes_Route               `protobuf:"bytes,50,rep,name=StaticRoutes" json:"StaticRoutes,omitempty"`
	ArpEntries            []*l3.ArpTable_ArpEntry                `protobuf:"bytes,51,rep,name=ArpEntries" json:"ArpEntries,omitempty"`
	ProxyArpInterfaces    []*l3.ProxyArpInterfaces_InterfaceList `protobuf:"bytes,52,rep,name=ProxyArpInterfaces" json:"ProxyArpInterfaces,omitempty"`
	ProxyArpRanges        []*l3.ProxyArpRanges_RangeList         `protobuf:"bytes,53,rep,name=ProxyArpRanges" json:"ProxyArpRanges,omitempty"`
	L4Feature             *l4.L4Features                         `protobuf:"bytes,60,opt,name=L4Feature" json:"L4Feature,omitempty"`
	ApplicationNamespaces []*l4.AppNamespaces_AppNamespace       `protobuf:"bytes,61,rep,name=ApplicationNamespaces" json:"ApplicationNamespaces,omitempty"`
	StnRules              []*stn.STN_Rule                        `protobuf:"bytes,70,rep,name=StnRules" json:"StnRules,omitempty"`
	NatGlobal             *nat.Nat44Global                       `protobuf:"bytes,71,opt,name=NatGlobal" json:"NatGlobal,omitempty"`
	DNATs                 []*nat.Nat44DNat_DNatConfig            `protobuf:"bytes,72,rep,name=DNATs" json:"DNATs,omitempty"`
	// Linuxplugin
	LinuxInterfaces []*interfaces1.LinuxInterfaces_Interface `protobuf:"bytes,80,rep,name=LinuxInterfaces" json:"LinuxInterfaces,omitempty"`
	LinuxArpEntries []*l31.LinuxStaticArpEntries_ArpEntry    `protobuf:"bytes,90,rep,name=LinuxArpEntries" json:"LinuxArpEntries,omitempty"`
	LinuxRoutes     []*l31.LinuxStaticRoutes_Route           `protobuf:"bytes,91,rep,name=LinuxRoutes" json:"LinuxRoutes,omitempty"`
}

func (m *DataRequest) Reset()                    { *m = DataRequest{} }
func (m *DataRequest) String() string            { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()               {}
func (*DataRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *DataRequest) GetAccessLists() []*acl.AccessLists_Acl {
	if m != nil {
		return m.AccessLists
	}
	return nil
}

func (m *DataRequest) GetInterfaces() []*interfaces.Interfaces_Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *DataRequest) GetBfdSessions() []*bfd.SingleHopBFD_Session {
	if m != nil {
		return m.BfdSessions
	}
	return nil
}

func (m *DataRequest) GetBfdAuthKeys() []*bfd.SingleHopBFD_Key {
	if m != nil {
		return m.BfdAuthKeys
	}
	return nil
}

func (m *DataRequest) GetBfdEchoFunction() *bfd.SingleHopBFD_EchoFunction {
	if m != nil {
		return m.BfdEchoFunction
	}
	return nil
}

func (m *DataRequest) GetBridgeDomains() []*l2.BridgeDomains_BridgeDomain {
	if m != nil {
		return m.BridgeDomains
	}
	return nil
}

func (m *DataRequest) GetFIBs() []*l2.FibTable_FibEntry {
	if m != nil {
		return m.FIBs
	}
	return nil
}

func (m *DataRequest) GetXCons() []*l2.XConnectPairs_XConnectPair {
	if m != nil {
		return m.XCons
	}
	return nil
}

func (m *DataRequest) GetStaticRoutes() []*l3.StaticRoutes_Route {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

func (m *DataRequest) GetArpEntries() []*l3.ArpTable_ArpEntry {
	if m != nil {
		return m.ArpEntries
	}
	return nil
}

func (m *DataRequest) GetProxyArpInterfaces() []*l3.ProxyArpInterfaces_InterfaceList {
	if m != nil {
		return m.ProxyArpInterfaces
	}
	return nil
}

func (m *DataRequest) GetProxyArpRanges() []*l3.ProxyArpRanges_RangeList {
	if m != nil {
		return m.ProxyArpRanges
	}
	return nil
}

func (m *DataRequest) GetL4Feature() *l4.L4Features {
	if m != nil {
		return m.L4Feature
	}
	return nil
}

func (m *DataRequest) GetApplicationNamespaces() []*l4.AppNamespaces_AppNamespace {
	if m != nil {
		return m.ApplicationNamespaces
	}
	return nil
}

func (m *DataRequest) GetStnRules() []*stn.STN_Rule {
	if m != nil {
		return m.StnRules
	}
	return nil
}

func (m *DataRequest) GetNatGlobal() *nat.Nat44Global {
	if m != nil {
		return m.NatGlobal
	}
	return nil
}

func (m *DataRequest) GetDNATs() []*nat.Nat44DNat_DNatConfig {
	if m != nil {
		return m.DNATs
	}
	return nil
}

func (m *DataRequest) GetLinuxInterfaces() []*interfaces1.LinuxInterfaces_Interface {
	if m != nil {
		return m.LinuxInterfaces
	}
	return nil
}

func (m *DataRequest) GetLinuxArpEntries() []*l31.LinuxStaticArpEntries_ArpEntry {
	if m != nil {
		return m.LinuxArpEntries
	}
	return nil
}

func (m *DataRequest) GetLinuxRoutes() []*l31.LinuxStaticRoutes_Route {
	if m != nil {
		return m.LinuxRoutes
	}
	return nil
}

// FromIndex represent a notification response which returns all notifications newer than
// provided index
type FromIndex struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *FromIndex) Reset()                    { *m = FromIndex{} }
func (m *FromIndex) String() string            { return proto.CompactTextString(m) }
func (*FromIndex) ProtoMessage()               {}
func (*FromIndex) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *FromIndex) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// Response to data change 'put'
type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

// Response to data change 'del'
type DelResponse struct {
}

func (m *DelResponse) Reset()                    { *m = DelResponse{} }
func (m *DelResponse) String() string            { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()               {}
func (*DelResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

// Response to data resync
type ResyncResponse struct {
}

func (m *ResyncResponse) Reset()                    { *m = ResyncResponse{} }
func (m *ResyncResponse) String() string            { return proto.CompactTextString(m) }
func (*ResyncResponse) ProtoMessage()               {}
func (*ResyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

// Response to 'from index' request. Returns indexed notification.
type NotificationsResponse struct {
	Index   uint32                            `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	IfNotif *interfaces.InterfaceNotification `protobuf:"bytes,2,opt,name=ifNotif" json:"ifNotif,omitempty"`
}

func (m *NotificationsResponse) Reset()                    { *m = NotificationsResponse{} }
func (m *NotificationsResponse) String() string            { return proto.CompactTextString(m) }
func (*NotificationsResponse) ProtoMessage()               {}
func (*NotificationsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *NotificationsResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NotificationsResponse) GetIfNotif() *interfaces.InterfaceNotification {
	if m != nil {
		return m.IfNotif
	}
	return nil
}

func init() {
	proto.RegisterType((*DataRequest)(nil), "rpc.DataRequest")
	proto.RegisterType((*FromIndex)(nil), "rpc.FromIndex")
	proto.RegisterType((*PutResponse)(nil), "rpc.PutResponse")
	proto.RegisterType((*DelResponse)(nil), "rpc.DelResponse")
	proto.RegisterType((*ResyncResponse)(nil), "rpc.ResyncResponse")
	proto.RegisterType((*NotificationsResponse)(nil), "rpc.NotificationsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataChangeService service

type DataChangeServiceClient interface {
	// Creates or updates one or multiple configuration items
	Put(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Removes one or multiple configuration items
	Del(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type dataChangeServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataChangeServiceClient(cc *grpc.ClientConn) DataChangeServiceClient {
	return &dataChangeServiceClient{cc}
}

func (c *dataChangeServiceClient) Put(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/rpc.DataChangeService/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChangeServiceClient) Del(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/rpc.DataChangeService/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataChangeService service

type DataChangeServiceServer interface {
	// Creates or updates one or multiple configuration items
	Put(context.Context, *DataRequest) (*PutResponse, error)
	// Removes one or multiple configuration items
	Del(context.Context, *DataRequest) (*DelResponse, error)
}

func RegisterDataChangeServiceServer(s *grpc.Server, srv DataChangeServiceServer) {
	s.RegisterService(&_DataChangeService_serviceDesc, srv)
}

func _DataChangeService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChangeServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DataChangeService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChangeServiceServer).Put(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChangeService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChangeServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DataChangeService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChangeServiceServer).Del(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataChangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DataChangeService",
	HandlerType: (*DataChangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DataChangeService_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _DataChangeService_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for DataResyncService service

type DataResyncServiceClient interface {
	// Calls vpp-agent resync
	Resync(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*ResyncResponse, error)
}

type dataResyncServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataResyncServiceClient(cc *grpc.ClientConn) DataResyncServiceClient {
	return &dataResyncServiceClient{cc}
}

func (c *dataResyncServiceClient) Resync(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*ResyncResponse, error) {
	out := new(ResyncResponse)
	err := grpc.Invoke(ctx, "/rpc.DataResyncService/Resync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataResyncService service

type DataResyncServiceServer interface {
	// Calls vpp-agent resync
	Resync(context.Context, *DataRequest) (*ResyncResponse, error)
}

func RegisterDataResyncServiceServer(s *grpc.Server, srv DataResyncServiceServer) {
	s.RegisterService(&_DataResyncService_serviceDesc, srv)
}

func _DataResyncService_Resync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataResyncServiceServer).Resync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DataResyncService/Resync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataResyncServiceServer).Resync(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataResyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DataResyncService",
	HandlerType: (*DataResyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resync",
			Handler:    _DataResyncService_Resync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for NotificationService service

type NotificationServiceClient interface {
	// Get notification stack
	Get(ctx context.Context, in *FromIndex, opts ...grpc.CallOption) (NotificationService_GetClient, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Get(ctx context.Context, in *FromIndex, opts ...grpc.CallOption) (NotificationService_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NotificationService_serviceDesc.Streams[0], c.cc, "/rpc.NotificationService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_GetClient interface {
	Recv() (*NotificationsResponse, error)
	grpc.ClientStream
}

type notificationServiceGetClient struct {
	grpc.ClientStream
}

func (x *notificationServiceGetClient) Recv() (*NotificationsResponse, error) {
	m := new(NotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NotificationService service

type NotificationServiceServer interface {
	// Get notification stack
	Get(*FromIndex, NotificationService_GetServer) error
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FromIndex)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).Get(m, &notificationServiceGetServer{stream})
}

type NotificationService_GetServer interface {
	Send(*NotificationsResponse) error
	grpc.ServerStream
}

type notificationServiceGetServer struct {
	grpc.ServerStream
}

func (x *notificationServiceGetServer) Send(m *NotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _NotificationService_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x51, 0x6f, 0x23, 0x35,
	0x10, 0x56, 0x29, 0x3d, 0xc8, 0x84, 0xf6, 0x8a, 0xaf, 0x45, 0x4b, 0x41, 0x25, 0x57, 0x81, 0xd4,
	0x22, 0xf0, 0xa2, 0x4d, 0x0e, 0x24, 0x8e, 0x93, 0xd8, 0x74, 0x2f, 0x6d, 0x69, 0x09, 0x91, 0x93,
	0x87, 0x13, 0xf7, 0xe4, 0x6c, 0x9c, 0xd4, 0xc8, 0xb1, 0x97, 0xb5, 0xf7, 0xd4, 0xfc, 0x66, 0xfe,
	0x04, 0xb2, 0x77, 0x93, 0x38, 0x69, 0x4e, 0x3a, 0xa9, 0x7d, 0x70, 0xd7, 0x33, 0xf3, 0x7d, 0xdf,
	0x8e, 0x77, 0xc6, 0xd3, 0x40, 0x2d, 0xcf, 0x52, 0x9c, 0xe5, 0xca, 0x28, 0xb4, 0x9d, 0x67, 0xe9,
	0xd1, 0x9f, 0x13, 0x6e, 0x6e, 0x8b, 0x21, 0x4e, 0xd5, 0x34, 0x14, 0x7c, 0x42, 0x8d, 0x0a, 0xdf,
	0x65, 0xd9, 0x8f, 0x74, 0xc2, 0xa4, 0x09, 0x33, 0x51, 0x4c, 0xb8, 0xd4, 0xe1, 0x88, 0x8d, 0x69,
	0x21, 0xcc, 0xdc, 0x4c, 0xd5, 0x74, 0xaa, 0x64, 0x38, 0x55, 0x23, 0x26, 0x42, 0x9a, 0xba, 0x55,
	0x6a, 0x3e, 0x5c, 0x6e, 0x38, 0x1e, 0xd9, 0x55, 0xc9, 0xbd, 0x7d, 0xa8, 0x1c, 0x97, 0x86, 0xe5,
	0x63, 0x9a, 0x32, 0xed, 0x6d, 0x2b, 0xf1, 0xeb, 0x87, 0x8a, 0x8b, 0x28, 0x14, 0xd1, 0xa3, 0x89,
	0x35, 0x43, 0xd1, 0x7c, 0x34, 0xb1, 0x56, 0x28, 0x5a, 0x8f, 0x55, 0x12, 0x49, 0x8d, 0x5d, 0x8f,
	0x25, 0xa7, 0x8d, 0xb4, 0xab, 0x92, 0x7b, 0xf3, 0x21, 0x72, 0x82, 0xcb, 0xe2, 0xae, 0x34, 0x3e,
	0xbc, 0xbc, 0x97, 0x0f, 0x52, 0xf6, 0xca, 0x71, 0xf2, 0x5f, 0x0d, 0xea, 0x09, 0x35, 0x94, 0xb0,
	0x7f, 0x0b, 0xa6, 0x0d, 0xfa, 0x19, 0xea, 0x71, 0x9a, 0x32, 0xad, 0x6f, 0xb8, 0x36, 0x3a, 0x80,
	0xc6, 0xf6, 0x69, 0x3d, 0x3a, 0xc0, 0xf6, 0x16, 0x78, 0x7e, 0x1c, 0xa7, 0x82, 0xf8, 0x40, 0xf4,
	0x3b, 0xc0, 0xd5, 0x22, 0xcb, 0xe0, 0xc0, 0xd1, 0x1a, 0xd8, 0x4b, 0xfc, 0x6a, 0xc3, 0x96, 0x78,
	0x1c, 0xf4, 0x12, 0xea, 0xed, 0xf1, 0xa8, 0xcf, 0xb4, 0xe6, 0x4a, 0xea, 0xe0, 0xd8, 0x49, 0x7c,
	0x89, 0xed, 0x85, 0xe9, 0x73, 0x39, 0x11, 0xec, 0x52, 0x65, 0xed, 0x4e, 0x82, 0x2b, 0x04, 0xf1,
	0xd1, 0xe8, 0x17, 0x47, 0x8e, 0x0b, 0x73, 0x7b, 0xcd, 0x66, 0x3a, 0xf8, 0xc6, 0x91, 0x0f, 0xef,
	0x93, 0xaf, 0xd9, 0x8c, 0xf8, 0x48, 0x74, 0x09, 0x4f, 0xdb, 0xe3, 0xd1, 0xeb, 0xf4, 0x56, 0x75,
	0x0a, 0x99, 0x1a, 0xae, 0x64, 0xd0, 0x68, 0x6c, 0x9d, 0xd6, 0xa3, 0xe3, 0xfb, 0x64, 0x1f, 0x45,
	0xd6, 0x69, 0x28, 0x81, 0xdd, 0x76, 0xce, 0x47, 0x13, 0x96, 0xa8, 0x29, 0xe5, 0x52, 0x07, 0xa7,
	0x2e, 0x89, 0x63, 0x2c, 0x22, 0xbc, 0x12, 0x58, 0xb1, 0xc8, 0x2a, 0x09, 0x9d, 0xc1, 0xc7, 0x9d,
	0xab, 0xb6, 0x0e, 0xce, 0xaa, 0x13, 0x88, 0x08, 0x77, 0xf8, 0x70, 0x40, 0x87, 0x82, 0xd9, 0xcd,
	0x6b, 0x69, 0xf2, 0x19, 0x71, 0x10, 0xd4, 0x82, 0x9d, 0x37, 0xe7, 0xf6, 0x53, 0x7d, 0xbf, 0x7c,
	0x91, 0x75, 0x48, 0x96, 0x9a, 0x1e, 0xe5, 0xb9, 0x5e, 0xb1, 0x48, 0x09, 0x46, 0xbf, 0xc2, 0x67,
	0x7d, 0x43, 0x0d, 0x4f, 0x89, 0x2a, 0x0c, 0xd3, 0x41, 0xe4, 0xc8, 0x5f, 0x60, 0xd1, 0xc4, 0xbe,
	0x1f, 0xbb, 0x07, 0x59, 0xc1, 0xa2, 0x17, 0x00, 0x71, 0x9e, 0xd9, 0x1c, 0x38, 0xd3, 0x41, 0x73,
	0x9e, 0x62, 0x13, 0xc7, 0x79, 0x56, 0xa6, 0x58, 0x85, 0x67, 0xc4, 0x03, 0xa2, 0x01, 0xa0, 0x5e,
	0xae, 0xee, 0x66, 0x71, 0x9e, 0x79, 0x3d, 0xd2, 0x72, 0xf4, 0x6f, 0x2d, 0xfd, 0x7e, 0x74, 0xd9,
	0x23, 0xb6, 0xbd, 0xc8, 0x06, 0x3e, 0x4a, 0x60, 0x6f, 0xee, 0x25, 0x54, 0x4e, 0x98, 0x0e, 0x5e,
	0x38, 0xc5, 0xaf, 0x7d, 0xc5, 0x32, 0x82, 0xdd, 0xc3, 0x29, 0xad, 0x71, 0xd0, 0x0f, 0x50, 0xbb,
	0x69, 0x75, 0x18, 0x35, 0x45, 0xce, 0x82, 0xdf, 0x5c, 0xe5, 0xf7, 0xb0, 0x68, 0xe1, 0x85, 0x53,
	0x93, 0x25, 0x00, 0x0d, 0xe0, 0x30, 0xce, 0x32, 0xc1, 0x53, 0x6a, 0x4b, 0xde, 0xa5, 0x53, 0xa6,
	0x33, 0x77, 0x98, 0x57, 0xf3, 0x12, 0xb4, 0x70, 0x9c, 0x65, 0xcb, 0xc0, 0x8a, 0x45, 0x36, 0x93,
	0xd1, 0x19, 0x7c, 0xda, 0x37, 0x92, 0x14, 0x82, 0xe9, 0xa0, 0xe3, 0x84, 0x76, 0xb1, 0x9d, 0x22,
	0xfd, 0x41, 0x17, 0x5b, 0x2f, 0x59, 0x84, 0x11, 0x86, 0x5a, 0x97, 0x9a, 0x0b, 0xa1, 0x86, 0x54,
	0x04, 0x17, 0x2e, 0xdd, 0x7d, 0x6c, 0x07, 0x58, 0x97, 0x9a, 0x56, 0xab, 0xf4, 0x93, 0x25, 0x04,
	0x85, 0xb0, 0x93, 0x74, 0xe3, 0x81, 0x0e, 0x2e, 0xab, 0xeb, 0xb4, 0xc0, 0x26, 0x5d, 0x6a, 0xb0,
	0xfd, 0x73, 0xae, 0xe4, 0x98, 0x4f, 0x48, 0x89, 0x43, 0x7f, 0xc1, 0xd3, 0x1b, 0x3b, 0x37, 0xbc,
	0x42, 0xf5, 0x1c, 0xf5, 0x3b, 0xff, 0x32, 0xaf, 0x41, 0xbc, 0x1b, 0xbd, 0xce, 0x46, 0x37, 0x95,
	0xa0, 0xd7, 0x38, 0x7f, 0x3b, 0xc1, 0x13, 0x5b, 0x27, 0x17, 0x2a, 0x7b, 0x6c, 0x09, 0x58, 0x76,
	0xd1, 0x3a, 0x15, 0xbd, 0x82, 0xba, 0x73, 0x55, 0xcd, 0xfb, 0xd6, 0x29, 0x7d, 0xb5, 0xa6, 0xb4,
	0xd2, 0xc1, 0x3e, 0xfe, 0xe4, 0x39, 0xd4, 0x3a, 0xb9, 0x9a, 0x5e, 0xc9, 0x11, 0xbb, 0x43, 0x07,
	0xb0, 0xc3, 0xed, 0x26, 0xd8, 0x6a, 0x6c, 0x9d, 0xee, 0x92, 0xd2, 0x38, 0xd9, 0x85, 0x7a, 0xaf,
	0x30, 0x84, 0xe9, 0x4c, 0x49, 0xcd, 0xac, 0x99, 0x30, 0xb1, 0x30, 0xf7, 0x61, 0x8f, 0x30, 0x3d,
	0x93, 0xe9, 0xc2, 0xf3, 0x0f, 0x1c, 0x76, 0x95, 0xe1, 0xe3, 0xaa, 0xac, 0x7a, 0x1e, 0xd8, 0x2c,
	0x8f, 0x5e, 0xc2, 0x27, 0x7c, 0xec, 0x08, 0xc1, 0x47, 0xae, 0x7c, 0xcf, 0x37, 0x0e, 0x49, 0x5f,
	0x92, 0xcc, 0x19, 0x11, 0x87, 0xcf, 0xed, 0xac, 0x3e, 0xbf, 0xb5, 0xbd, 0xdb, 0x67, 0xf9, 0x3b,
	0x9e, 0x32, 0x74, 0x06, 0xdb, 0xbd, 0xc2, 0xa0, 0x7d, 0x6c, 0x7f, 0xfd, 0x78, 0xa3, 0xfc, 0xa8,
	0xf4, 0x78, 0x87, 0xb1, 0xd0, 0x84, 0x89, 0xf7, 0x42, 0xbd, 0x83, 0x46, 0x49, 0xf9, 0xaa, 0xf2,
	0xb0, 0xf3, 0x57, 0x85, 0xf0, 0xa4, 0x74, 0x6c, 0x90, 0x78, 0xe6, 0x3c, 0xab, 0x1f, 0x27, 0xfa,
	0x03, 0x9e, 0xf9, 0x27, 0x99, 0xeb, 0x34, 0x61, 0xfb, 0x82, 0x19, 0xb4, 0xe7, 0x28, 0x8b, 0x82,
	0x1c, 0x1d, 0x39, 0x7b, 0xe3, 0xd7, 0xfc, 0x69, 0x6b, 0xf8, 0xc4, 0xfd, 0xc3, 0x6a, 0xfe, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x88, 0x1a, 0x9f, 0x83, 0xe6, 0x09, 0x00, 0x00,
}
