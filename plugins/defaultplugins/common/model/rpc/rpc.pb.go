// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	DataRequest
	PutResponse
	DelResponse
	ResyncResponse
	ResyncConfigResponse
	ResyncConfigRequest
*/
package rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import interfaces "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/interfaces"
import l2 "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/l2"
import l3 "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/l3"
import acl "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/acl"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DataRequest struct {
	Interfaces   []*interfaces.Interfaces_Interface `protobuf:"bytes,1,rep,name=Interfaces" json:"Interfaces,omitempty"`
	BDs          []*l2.BridgeDomains_BridgeDomain   `protobuf:"bytes,2,rep,name=BDs" json:"BDs,omitempty"`
	XCons        []*l2.XConnectPairs_XConnectPair   `protobuf:"bytes,3,rep,name=XCons" json:"XCons,omitempty"`
	ACLs         []*acl.AccessLists_Acl             `protobuf:"bytes,4,rep,name=ACLs" json:"ACLs,omitempty"`
	StaticRoutes []*l3.StaticRoutes_Route           `protobuf:"bytes,5,rep,name=StaticRoutes" json:"StaticRoutes,omitempty"`
}

func (m *DataRequest) Reset()                    { *m = DataRequest{} }
func (m *DataRequest) String() string            { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()               {}
func (*DataRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *DataRequest) GetInterfaces() []*interfaces.Interfaces_Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *DataRequest) GetBDs() []*l2.BridgeDomains_BridgeDomain {
	if m != nil {
		return m.BDs
	}
	return nil
}

func (m *DataRequest) GetXCons() []*l2.XConnectPairs_XConnectPair {
	if m != nil {
		return m.XCons
	}
	return nil
}

func (m *DataRequest) GetACLs() []*acl.AccessLists_Acl {
	if m != nil {
		return m.ACLs
	}
	return nil
}

func (m *DataRequest) GetStaticRoutes() []*l3.StaticRoutes_Route {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

type DelResponse struct {
}

func (m *DelResponse) Reset()                    { *m = DelResponse{} }
func (m *DelResponse) String() string            { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()               {}
func (*DelResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

type ResyncResponse struct {
}

func (m *ResyncResponse) Reset()                    { *m = ResyncResponse{} }
func (m *ResyncResponse) String() string            { return proto.CompactTextString(m) }
func (*ResyncResponse) ProtoMessage()               {}
func (*ResyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

type ResyncConfigResponse struct {
}

func (m *ResyncConfigResponse) Reset()                    { *m = ResyncConfigResponse{} }
func (m *ResyncConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ResyncConfigResponse) ProtoMessage()               {}
func (*ResyncConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

type ResyncConfigRequest struct {
	Interfaces   *interfaces.Interfaces `protobuf:"bytes,1,opt,name=Interfaces" json:"Interfaces,omitempty"`
	BDs          *l2.BridgeDomains      `protobuf:"bytes,2,opt,name=BDs" json:"BDs,omitempty"`
	XCons        *l2.XConnectPairs      `protobuf:"bytes,3,opt,name=XCons" json:"XCons,omitempty"`
	ACLs         *acl.AccessLists       `protobuf:"bytes,4,opt,name=ACLs" json:"ACLs,omitempty"`
	StaticRoutes *l3.StaticRoutes       `protobuf:"bytes,5,opt,name=StaticRoutes" json:"StaticRoutes,omitempty"`
}

func (m *ResyncConfigRequest) Reset()                    { *m = ResyncConfigRequest{} }
func (m *ResyncConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ResyncConfigRequest) ProtoMessage()               {}
func (*ResyncConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *ResyncConfigRequest) GetInterfaces() *interfaces.Interfaces {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *ResyncConfigRequest) GetBDs() *l2.BridgeDomains {
	if m != nil {
		return m.BDs
	}
	return nil
}

func (m *ResyncConfigRequest) GetXCons() *l2.XConnectPairs {
	if m != nil {
		return m.XCons
	}
	return nil
}

func (m *ResyncConfigRequest) GetACLs() *acl.AccessLists {
	if m != nil {
		return m.ACLs
	}
	return nil
}

func (m *ResyncConfigRequest) GetStaticRoutes() *l3.StaticRoutes {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

func init() {
	proto.RegisterType((*DataRequest)(nil), "rpc.DataRequest")
	proto.RegisterType((*PutResponse)(nil), "rpc.PutResponse")
	proto.RegisterType((*DelResponse)(nil), "rpc.DelResponse")
	proto.RegisterType((*ResyncResponse)(nil), "rpc.ResyncResponse")
	proto.RegisterType((*ResyncConfigResponse)(nil), "rpc.ResyncConfigResponse")
	proto.RegisterType((*ResyncConfigRequest)(nil), "rpc.ResyncConfigRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataChangeService service

type DataChangeServiceClient interface {
	Put(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Del(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type dataChangeServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataChangeServiceClient(cc *grpc.ClientConn) DataChangeServiceClient {
	return &dataChangeServiceClient{cc}
}

func (c *dataChangeServiceClient) Put(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/rpc.DataChangeService/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChangeServiceClient) Del(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/rpc.DataChangeService/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataChangeService service

type DataChangeServiceServer interface {
	Put(context.Context, *DataRequest) (*PutResponse, error)
	Del(context.Context, *DataRequest) (*DelResponse, error)
}

func RegisterDataChangeServiceServer(s *grpc.Server, srv DataChangeServiceServer) {
	s.RegisterService(&_DataChangeService_serviceDesc, srv)
}

func _DataChangeService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChangeServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DataChangeService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChangeServiceServer).Put(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChangeService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChangeServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DataChangeService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChangeServiceServer).Del(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataChangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DataChangeService",
	HandlerType: (*DataChangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DataChangeService_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _DataChangeService_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for DataResyncService service

type DataResyncServiceClient interface {
	Resync(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*ResyncResponse, error)
}

type dataResyncServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataResyncServiceClient(cc *grpc.ClientConn) DataResyncServiceClient {
	return &dataResyncServiceClient{cc}
}

func (c *dataResyncServiceClient) Resync(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*ResyncResponse, error) {
	out := new(ResyncResponse)
	err := grpc.Invoke(ctx, "/rpc.DataResyncService/Resync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataResyncService service

type DataResyncServiceServer interface {
	Resync(context.Context, *DataRequest) (*ResyncResponse, error)
}

func RegisterDataResyncServiceServer(s *grpc.Server, srv DataResyncServiceServer) {
	s.RegisterService(&_DataResyncService_serviceDesc, srv)
}

func _DataResyncService_Resync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataResyncServiceServer).Resync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DataResyncService/Resync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataResyncServiceServer).Resync(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataResyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DataResyncService",
	HandlerType: (*DataResyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resync",
			Handler:    _DataResyncService_Resync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for ResyncConfigService service

type ResyncConfigServiceClient interface {
	ResyncConfig(ctx context.Context, in *ResyncConfigRequest, opts ...grpc.CallOption) (*ResyncConfigResponse, error)
}

type resyncConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewResyncConfigServiceClient(cc *grpc.ClientConn) ResyncConfigServiceClient {
	return &resyncConfigServiceClient{cc}
}

func (c *resyncConfigServiceClient) ResyncConfig(ctx context.Context, in *ResyncConfigRequest, opts ...grpc.CallOption) (*ResyncConfigResponse, error) {
	out := new(ResyncConfigResponse)
	err := grpc.Invoke(ctx, "/rpc.ResyncConfigService/ResyncConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResyncConfigService service

type ResyncConfigServiceServer interface {
	ResyncConfig(context.Context, *ResyncConfigRequest) (*ResyncConfigResponse, error)
}

func RegisterResyncConfigServiceServer(s *grpc.Server, srv ResyncConfigServiceServer) {
	s.RegisterService(&_ResyncConfigService_serviceDesc, srv)
}

func _ResyncConfigService_ResyncConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResyncConfigServiceServer).ResyncConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ResyncConfigService/ResyncConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResyncConfigServiceServer).ResyncConfig(ctx, req.(*ResyncConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResyncConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ResyncConfigService",
	HandlerType: (*ResyncConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResyncConfig",
			Handler:    _ResyncConfigService_ResyncConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0xd5, 0x65, 0x9b, 0x84, 0x3b, 0x50, 0x97, 0x4d, 0x53, 0xe8, 0x01, 0x4d, 0x03, 0x89,
	0x71, 0xc0, 0x41, 0xe9, 0xc4, 0x81, 0x13, 0x5d, 0x72, 0x99, 0x18, 0x52, 0x95, 0x5d, 0x10, 0x9c,
	0x3c, 0xf7, 0x35, 0xb3, 0xe4, 0xd8, 0x21, 0x76, 0x26, 0xf1, 0xc7, 0xf0, 0x77, 0x72, 0x45, 0xb6,
	0x97, 0xcc, 0xee, 0xca, 0xa9, 0x1c, 0xaa, 0xfa, 0x7d, 0xfe, 0xde, 0xe7, 0xf6, 0xf7, 0x6c, 0xf4,
	0xac, 0x6d, 0x28, 0x6e, 0x5a, 0xa9, 0x65, 0x1c, 0xb5, 0x0d, 0x9d, 0xfe, 0xa8, 0x98, 0xbe, 0xeb,
	0x6e, 0x31, 0x95, 0x75, 0xca, 0x59, 0x45, 0xb4, 0x4c, 0xef, 0x9b, 0xe6, 0x3d, 0xa9, 0x40, 0xe8,
	0xb4, 0xe1, 0x5d, 0xc5, 0x84, 0x4a, 0x97, 0xb0, 0x22, 0x1d, 0xd7, 0x7d, 0x49, 0x65, 0x5d, 0x4b,
	0x91, 0xd6, 0x72, 0x09, 0x3c, 0x65, 0x42, 0x43, 0xbb, 0x22, 0x14, 0x94, 0xb7, 0x74, 0x27, 0x4c,
	0xbf, 0x6c, 0x1b, 0xce, 0xb3, 0x94, 0x67, 0xff, 0x2d, 0x6c, 0x96, 0xf2, 0xd9, 0x43, 0xd8, 0xd7,
	0x6d, 0xc3, 0x08, 0xb5, 0x1f, 0x17, 0x77, 0xf6, 0x7b, 0x07, 0x8d, 0x0b, 0xa2, 0x49, 0x09, 0x3f,
	0x3b, 0x50, 0x3a, 0xfe, 0x8c, 0xd0, 0xd5, 0x00, 0x23, 0x19, 0x9d, 0x46, 0xe7, 0xe3, 0xec, 0x14,
	0x7b, 0x7c, 0xae, 0x36, 0x2c, 0x4b, 0xaf, 0x27, 0xfe, 0x80, 0xa2, 0xcb, 0x42, 0x25, 0x3b, 0xb6,
	0xf5, 0x15, 0xe6, 0x19, 0xbe, 0x6c, 0xd9, 0xb2, 0x82, 0x42, 0xd6, 0x84, 0x09, 0x15, 0x54, 0xa5,
	0xb1, 0xc6, 0x17, 0x68, 0xef, 0x5b, 0x2e, 0x85, 0x4a, 0xa2, 0xc7, 0x1e, 0x23, 0x08, 0xa0, 0x7a,
	0x41, 0x58, 0xab, 0x82, 0xaa, 0x74, 0xe6, 0xf8, 0x1c, 0xed, 0xce, 0xf3, 0x6b, 0x95, 0xec, 0xda,
	0xa6, 0x63, 0x6c, 0xfe, 0xd3, 0x9c, 0x52, 0x50, 0xea, 0x9a, 0x29, 0xad, 0xf0, 0x9c, 0xf2, 0xd2,
	0x3a, 0xe2, 0x4f, 0xe8, 0xe0, 0x46, 0x13, 0xcd, 0x68, 0x29, 0x3b, 0x0d, 0x2a, 0xd9, 0xb3, 0x1d,
	0x27, 0x98, 0xcf, 0xb0, 0xaf, 0x63, 0xfb, 0x55, 0x06, 0xde, 0xb3, 0xe7, 0x68, 0xbc, 0xe8, 0x74,
	0x09, 0xaa, 0x91, 0x42, 0x81, 0x29, 0x0b, 0xe0, 0x43, 0x39, 0x41, 0x2f, 0x4a, 0x50, 0xbf, 0x04,
	0x1d, 0x94, 0x13, 0x74, 0xec, 0x94, 0x5c, 0x8a, 0x15, 0xab, 0x06, 0xfd, 0xcf, 0x08, 0x1d, 0x85,
	0x1b, 0x8e, 0xf7, 0xc7, 0x35, 0xde, 0x23, 0xfb, 0xcb, 0x36, 0xf2, 0x0e, 0x28, 0xbf, 0xee, 0x29,
	0x9b, 0x86, 0xc3, 0x27, 0x94, 0x1d, 0xd8, 0xb7, 0x8f, 0x60, 0x07, 0x5b, 0x00, 0xb6, 0x67, 0xf9,
	0x66, 0x60, 0x69, 0x7c, 0x93, 0x75, 0x96, 0x0f, 0x1c, 0x2f, 0x9e, 0x70, 0x74, 0xee, 0x35, 0x8e,
	0x21, 0xc1, 0x8c, 0xa1, 0x43, 0x73, 0xc1, 0xf2, 0x3b, 0x22, 0x2a, 0xb8, 0x81, 0xf6, 0x9e, 0x51,
	0x88, 0xdf, 0xa1, 0x68, 0xd1, 0xe9, 0x78, 0x82, 0xcd, 0xa3, 0xf6, 0xee, 0xdf, 0xd4, 0x29, 0x1e,
	0x72, 0x63, 0x2d, 0x80, 0xff, 0xd3, 0xea, 0x8d, 0x23, 0x2b, 0xdc, 0x51, 0x8e, 0x73, 0x7f, 0x54,
	0x8a, 0xf6, 0x9d, 0xb0, 0x21, 0xe2, 0xc8, 0x2a, 0xe1, 0x08, 0xb3, 0xef, 0xe1, 0xa4, 0xfa, 0x9c,
	0x1c, 0x1d, 0xf8, 0x72, 0x9c, 0x78, 0xbd, 0xc1, 0x4c, 0xa7, 0x2f, 0x37, 0xec, 0xb8, 0xec, 0xdb,
	0x7d, 0xfb, 0xea, 0x66, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x59, 0x24, 0x52, 0xcd, 0x04,
	0x00, 0x00,
}
