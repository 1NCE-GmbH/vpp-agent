// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	DelNameRequest
	DelStaticRouteRequest
	PutResponse
	DelResponse
	ResyncConfigResponse
	ResyncConfigRequest
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import interfaces "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/interfaces"
import l2 "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/l2"
import l3 "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/l3"
import acl "github.com/ligato/vpp-agent/plugins/defaultplugins/common/model/acl"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DelNameRequest struct {
	// Name of interface, bridge domain, etc.
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *DelNameRequest) Reset()                    { *m = DelNameRequest{} }
func (m *DelNameRequest) String() string            { return proto.CompactTextString(m) }
func (*DelNameRequest) ProtoMessage()               {}
func (*DelNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DelNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DelStaticRouteRequest struct {
	VRF         uint32 `protobuf:"varint,1,opt,name=VRF" json:"VRF,omitempty"`
	DstAddr     string `protobuf:"bytes,2,opt,name=dstAddr" json:"dstAddr,omitempty"`
	NextHopAddr string `protobuf:"bytes,3,opt,name=nextHopAddr" json:"nextHopAddr,omitempty"`
}

func (m *DelStaticRouteRequest) Reset()                    { *m = DelStaticRouteRequest{} }
func (m *DelStaticRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*DelStaticRouteRequest) ProtoMessage()               {}
func (*DelStaticRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DelStaticRouteRequest) GetVRF() uint32 {
	if m != nil {
		return m.VRF
	}
	return 0
}

func (m *DelStaticRouteRequest) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *DelStaticRouteRequest) GetNextHopAddr() string {
	if m != nil {
		return m.NextHopAddr
	}
	return ""
}

type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DelResponse struct {
}

func (m *DelResponse) Reset()                    { *m = DelResponse{} }
func (m *DelResponse) String() string            { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()               {}
func (*DelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ResyncConfigResponse struct {
}

func (m *ResyncConfigResponse) Reset()                    { *m = ResyncConfigResponse{} }
func (m *ResyncConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ResyncConfigResponse) ProtoMessage()               {}
func (*ResyncConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ResyncConfigRequest struct {
	Interfaces   *interfaces.Interfaces `protobuf:"bytes,1,opt,name=Interfaces" json:"Interfaces,omitempty"`
	BDs          *l2.BridgeDomains      `protobuf:"bytes,2,opt,name=BDs" json:"BDs,omitempty"`
	XCons        *l2.XConnectPairs      `protobuf:"bytes,3,opt,name=XCons" json:"XCons,omitempty"`
	ACLs         *acl.AccessLists       `protobuf:"bytes,4,opt,name=ACLs" json:"ACLs,omitempty"`
	StaticRoutes *l3.StaticRoutes       `protobuf:"bytes,5,opt,name=StaticRoutes" json:"StaticRoutes,omitempty"`
}

func (m *ResyncConfigRequest) Reset()                    { *m = ResyncConfigRequest{} }
func (m *ResyncConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ResyncConfigRequest) ProtoMessage()               {}
func (*ResyncConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResyncConfigRequest) GetInterfaces() *interfaces.Interfaces {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *ResyncConfigRequest) GetBDs() *l2.BridgeDomains {
	if m != nil {
		return m.BDs
	}
	return nil
}

func (m *ResyncConfigRequest) GetXCons() *l2.XConnectPairs {
	if m != nil {
		return m.XCons
	}
	return nil
}

func (m *ResyncConfigRequest) GetACLs() *acl.AccessLists {
	if m != nil {
		return m.ACLs
	}
	return nil
}

func (m *ResyncConfigRequest) GetStaticRoutes() *l3.StaticRoutes {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

func init() {
	proto.RegisterType((*DelNameRequest)(nil), "rpc.DelNameRequest")
	proto.RegisterType((*DelStaticRouteRequest)(nil), "rpc.DelStaticRouteRequest")
	proto.RegisterType((*PutResponse)(nil), "rpc.PutResponse")
	proto.RegisterType((*DelResponse)(nil), "rpc.DelResponse")
	proto.RegisterType((*ResyncConfigResponse)(nil), "rpc.ResyncConfigResponse")
	proto.RegisterType((*ResyncConfigRequest)(nil), "rpc.ResyncConfigRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChangeConfigService service

type ChangeConfigServiceClient interface {
	// PutInterfaces creates or updates one or multiple interfaces
	PutInterface(ctx context.Context, in *interfaces.Interfaces_Interface, opts ...grpc.CallOption) (*PutResponse, error)
	// DelInterfaces one or multiple interfaces by their unique names
	DelInterface(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error)
	// PutBDs creates or updates one or multiple BDs
	PutBD(ctx context.Context, in *l2.BridgeDomains_BridgeDomain, opts ...grpc.CallOption) (*PutResponse, error)
	// DelBDs one or multiple BDs by their unique names
	DelBD(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error)
	// PutXCons creates or updates one or multiple Cross Connects
	PutXCon(ctx context.Context, in *l2.XConnectPairs_XConnectPair, opts ...grpc.CallOption) (*PutResponse, error)
	// DelXCons one or multiple Cross Connects by their unique names
	DelXCon(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error)
	// PutACLs creates or updates one or multiple ACLs
	PutACL(ctx context.Context, in *acl.AccessLists_Acl, opts ...grpc.CallOption) (*PutResponse, error)
	// DelACLs one or multiple ACLs by their unique names
	DelACL(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error)
	// PutStaticRoutes creates or updates one or multiple ACLs
	PutStaticRoute(ctx context.Context, in *l3.StaticRoutes_Route, opts ...grpc.CallOption) (*PutResponse, error)
	// DelStaticRoutes one or multiple ACLs by their unique names
	DelStaticRoute(ctx context.Context, in *DelStaticRouteRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type changeConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewChangeConfigServiceClient(cc *grpc.ClientConn) ChangeConfigServiceClient {
	return &changeConfigServiceClient{cc}
}

func (c *changeConfigServiceClient) PutInterface(ctx context.Context, in *interfaces.Interfaces_Interface, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/PutInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) DelInterface(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/DelInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) PutBD(ctx context.Context, in *l2.BridgeDomains_BridgeDomain, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/PutBD", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) DelBD(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/DelBD", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) PutXCon(ctx context.Context, in *l2.XConnectPairs_XConnectPair, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/PutXCon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) DelXCon(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/DelXCon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) PutACL(ctx context.Context, in *acl.AccessLists_Acl, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/PutACL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) DelACL(ctx context.Context, in *DelNameRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/DelACL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) PutStaticRoute(ctx context.Context, in *l3.StaticRoutes_Route, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/PutStaticRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeConfigServiceClient) DelStaticRoute(ctx context.Context, in *DelStaticRouteRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/rpc.ChangeConfigService/DelStaticRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChangeConfigService service

type ChangeConfigServiceServer interface {
	// PutInterfaces creates or updates one or multiple interfaces
	PutInterface(context.Context, *interfaces.Interfaces_Interface) (*PutResponse, error)
	// DelInterfaces one or multiple interfaces by their unique names
	DelInterface(context.Context, *DelNameRequest) (*DelResponse, error)
	// PutBDs creates or updates one or multiple BDs
	PutBD(context.Context, *l2.BridgeDomains_BridgeDomain) (*PutResponse, error)
	// DelBDs one or multiple BDs by their unique names
	DelBD(context.Context, *DelNameRequest) (*DelResponse, error)
	// PutXCons creates or updates one or multiple Cross Connects
	PutXCon(context.Context, *l2.XConnectPairs_XConnectPair) (*PutResponse, error)
	// DelXCons one or multiple Cross Connects by their unique names
	DelXCon(context.Context, *DelNameRequest) (*DelResponse, error)
	// PutACLs creates or updates one or multiple ACLs
	PutACL(context.Context, *acl.AccessLists_Acl) (*PutResponse, error)
	// DelACLs one or multiple ACLs by their unique names
	DelACL(context.Context, *DelNameRequest) (*DelResponse, error)
	// PutStaticRoutes creates or updates one or multiple ACLs
	PutStaticRoute(context.Context, *l3.StaticRoutes_Route) (*PutResponse, error)
	// DelStaticRoutes one or multiple ACLs by their unique names
	DelStaticRoute(context.Context, *DelStaticRouteRequest) (*DelResponse, error)
}

func RegisterChangeConfigServiceServer(s *grpc.Server, srv ChangeConfigServiceServer) {
	s.RegisterService(&_ChangeConfigService_serviceDesc, srv)
}

func _ChangeConfigService_PutInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interfaces.Interfaces_Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).PutInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/PutInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).PutInterface(ctx, req.(*interfaces.Interfaces_Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_DelInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).DelInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/DelInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).DelInterface(ctx, req.(*DelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_PutBD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.BridgeDomains_BridgeDomain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).PutBD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/PutBD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).PutBD(ctx, req.(*l2.BridgeDomains_BridgeDomain))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_DelBD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).DelBD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/DelBD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).DelBD(ctx, req.(*DelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_PutXCon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.XConnectPairs_XConnectPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).PutXCon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/PutXCon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).PutXCon(ctx, req.(*l2.XConnectPairs_XConnectPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_DelXCon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).DelXCon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/DelXCon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).DelXCon(ctx, req.(*DelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_PutACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acl.AccessLists_Acl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).PutACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/PutACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).PutACL(ctx, req.(*acl.AccessLists_Acl))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_DelACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).DelACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/DelACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).DelACL(ctx, req.(*DelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_PutStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l3.StaticRoutes_Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).PutStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/PutStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).PutStaticRoute(ctx, req.(*l3.StaticRoutes_Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeConfigService_DelStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeConfigServiceServer).DelStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ChangeConfigService/DelStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeConfigServiceServer).DelStaticRoute(ctx, req.(*DelStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChangeConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ChangeConfigService",
	HandlerType: (*ChangeConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutInterface",
			Handler:    _ChangeConfigService_PutInterface_Handler,
		},
		{
			MethodName: "DelInterface",
			Handler:    _ChangeConfigService_DelInterface_Handler,
		},
		{
			MethodName: "PutBD",
			Handler:    _ChangeConfigService_PutBD_Handler,
		},
		{
			MethodName: "DelBD",
			Handler:    _ChangeConfigService_DelBD_Handler,
		},
		{
			MethodName: "PutXCon",
			Handler:    _ChangeConfigService_PutXCon_Handler,
		},
		{
			MethodName: "DelXCon",
			Handler:    _ChangeConfigService_DelXCon_Handler,
		},
		{
			MethodName: "PutACL",
			Handler:    _ChangeConfigService_PutACL_Handler,
		},
		{
			MethodName: "DelACL",
			Handler:    _ChangeConfigService_DelACL_Handler,
		},
		{
			MethodName: "PutStaticRoute",
			Handler:    _ChangeConfigService_PutStaticRoute_Handler,
		},
		{
			MethodName: "DelStaticRoute",
			Handler:    _ChangeConfigService_DelStaticRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for ResyncConfigService service

type ResyncConfigServiceClient interface {
	ResyncConfig(ctx context.Context, in *ResyncConfigRequest, opts ...grpc.CallOption) (*ResyncConfigResponse, error)
}

type resyncConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewResyncConfigServiceClient(cc *grpc.ClientConn) ResyncConfigServiceClient {
	return &resyncConfigServiceClient{cc}
}

func (c *resyncConfigServiceClient) ResyncConfig(ctx context.Context, in *ResyncConfigRequest, opts ...grpc.CallOption) (*ResyncConfigResponse, error) {
	out := new(ResyncConfigResponse)
	err := grpc.Invoke(ctx, "/rpc.ResyncConfigService/ResyncConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResyncConfigService service

type ResyncConfigServiceServer interface {
	ResyncConfig(context.Context, *ResyncConfigRequest) (*ResyncConfigResponse, error)
}

func RegisterResyncConfigServiceServer(s *grpc.Server, srv ResyncConfigServiceServer) {
	s.RegisterService(&_ResyncConfigService_serviceDesc, srv)
}

func _ResyncConfigService_ResyncConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResyncConfigServiceServer).ResyncConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ResyncConfigService/ResyncConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResyncConfigServiceServer).ResyncConfig(ctx, req.(*ResyncConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResyncConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ResyncConfigService",
	HandlerType: (*ResyncConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResyncConfig",
			Handler:    _ResyncConfigService_ResyncConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x55, 0x7f, 0x49, 0x5a, 0x75, 0x92, 0x56, 0xfd, 0x6d, 0x4b, 0x65, 0x72, 0x40, 0x51, 0xa8,
	0x04, 0x17, 0xec, 0xca, 0x01, 0x24, 0x40, 0x42, 0x4a, 0x6c, 0x21, 0x10, 0x01, 0x59, 0x5b, 0x09,
	0x21, 0x38, 0xb9, 0xeb, 0x89, 0x6b, 0x69, 0xbd, 0x6b, 0xbc, 0xeb, 0x0a, 0x3e, 0x22, 0x9f, 0x88,
	0x2b, 0xf2, 0x3a, 0x7f, 0xec, 0xc6, 0x87, 0x48, 0xe5, 0x10, 0x65, 0x67, 0xe6, 0xcd, 0x7b, 0x3b,
	0x33, 0x3b, 0x86, 0xc3, 0x3c, 0x63, 0x76, 0x96, 0x4b, 0x2d, 0x49, 0x27, 0xcf, 0xd8, 0xf0, 0x7b,
	0x9c, 0xe8, 0x9b, 0xe2, 0xda, 0x66, 0x32, 0x75, 0x78, 0x12, 0x87, 0x5a, 0x3a, 0xb7, 0x59, 0xf6,
	0x2c, 0x8c, 0x51, 0x68, 0x27, 0xe3, 0x45, 0x9c, 0x08, 0xe5, 0x44, 0xb8, 0x08, 0x0b, 0xae, 0x57,
	0x26, 0x93, 0x69, 0x2a, 0x85, 0x93, 0xca, 0x08, 0xb9, 0x93, 0x08, 0x8d, 0xf9, 0x22, 0x64, 0xa8,
	0x6a, 0xc7, 0x4a, 0x61, 0xf8, 0xf1, 0xbe, 0xe4, 0xdc, 0x75, 0xb8, 0xfb, 0xcf, 0xc8, 0x26, 0x0e,
	0x9f, 0x2c, 0xc9, 0x3e, 0xdd, 0x97, 0x2c, 0x64, 0xe6, 0x57, 0xd1, 0x8d, 0x2f, 0xe0, 0xd8, 0x47,
	0xfe, 0x39, 0x4c, 0x91, 0xe2, 0x8f, 0x02, 0x95, 0x26, 0x04, 0xba, 0xa5, 0x69, 0xed, 0x8d, 0xf6,
	0x9e, 0x1e, 0x52, 0x73, 0x1e, 0x23, 0x3c, 0xf0, 0x91, 0x5f, 0xe9, 0x50, 0x27, 0x8c, 0xca, 0x42,
	0xaf, 0xc1, 0x27, 0xd0, 0xf9, 0x42, 0xdf, 0x19, 0xec, 0x11, 0x2d, 0x8f, 0xc4, 0x82, 0x83, 0x48,
	0xe9, 0x69, 0x14, 0xe5, 0xd6, 0x7f, 0x86, 0x61, 0x65, 0x92, 0x11, 0xf4, 0x05, 0xfe, 0xd4, 0xef,
	0x65, 0x66, 0xa2, 0x1d, 0x13, 0xad, 0xbb, 0xc6, 0x47, 0xd0, 0x0f, 0x0a, 0x4d, 0x51, 0x65, 0x52,
	0x28, 0x2c, 0x4d, 0x1f, 0xf9, 0xda, 0x3c, 0x87, 0x33, 0x8a, 0xea, 0x97, 0x60, 0x9e, 0x14, 0x8b,
	0x24, 0x5e, 0xfb, 0xff, 0xec, 0xc1, 0x69, 0x33, 0x50, 0xdd, 0xed, 0x25, 0xc0, 0x87, 0xf5, 0x5c,
	0xcd, 0x15, 0xfb, 0xee, 0xb9, 0x5d, 0x1b, 0xf5, 0x26, 0x4a, 0x6b, 0x48, 0xf2, 0x18, 0x3a, 0x33,
	0x5f, 0x99, 0xdb, 0xf7, 0xdd, 0xff, 0x6d, 0xee, 0xda, 0xb3, 0x3c, 0x89, 0x62, 0xf4, 0x65, 0x1a,
	0x26, 0x42, 0xd1, 0x32, 0x4a, 0x9e, 0x40, 0xef, 0xab, 0x27, 0x85, 0x32, 0x65, 0x2c, 0x61, 0xa5,
	0x43, 0x20, 0xd3, 0x41, 0x98, 0xe4, 0x8a, 0x56, 0x71, 0x72, 0x01, 0xdd, 0xa9, 0x37, 0x57, 0x56,
	0xd7, 0xe0, 0x4e, 0xec, 0xb2, 0xf5, 0x53, 0xc6, 0x50, 0xa9, 0x79, 0xa2, 0xb4, 0xa2, 0x26, 0x4a,
	0x9e, 0xc3, 0xa0, 0xd6, 0x5d, 0x65, 0xf5, 0x96, 0x68, 0x3e, 0xb1, 0xeb, 0x7e, 0xda, 0x40, 0xb9,
	0xbf, 0xbb, 0x70, 0xea, 0xdd, 0x84, 0x22, 0xc6, 0xaa, 0xf2, 0x2b, 0xcc, 0x6f, 0x13, 0x86, 0x64,
	0x06, 0x83, 0xa0, 0xd0, 0xeb, 0x92, 0xc8, 0xa8, 0xbd, 0xea, 0xcd, 0x71, 0x78, 0x62, 0x97, 0xdb,
	0x55, 0x6b, 0x3e, 0x79, 0x01, 0x03, 0x1f, 0xf9, 0x86, 0xe3, 0xd4, 0x20, 0x9a, 0x6f, 0x65, 0x99,
	0x56, 0x1b, 0x12, 0x79, 0x05, 0xbd, 0xa0, 0xd0, 0x33, 0x9f, 0x3c, 0xda, 0x6a, 0x5c, 0xc3, 0x6a,
	0x51, 0xb4, 0xa1, 0xe7, 0x23, 0x9f, 0xf9, 0xbb, 0x4a, 0xbd, 0x81, 0x83, 0xa0, 0xd0, 0x65, 0x97,
	0x2b, 0xb1, 0x46, 0xfb, 0x1b, 0x56, 0x8b, 0xd8, 0x25, 0x1c, 0xf8, 0xc8, 0x4d, 0xf2, 0x8e, 0x72,
	0x97, 0xb0, 0x1f, 0x14, 0x7a, 0xea, 0xcd, 0xc9, 0xd9, 0xdd, 0x21, 0xda, 0x53, 0xc6, 0x5b, 0x34,
	0x1c, 0xd8, 0xf7, 0x91, 0x97, 0x19, 0x3b, 0x4a, 0xbc, 0x86, 0xe3, 0xa0, 0xd0, 0xb5, 0x11, 0x93,
	0xf3, 0xbb, 0x2f, 0xc0, 0x36, 0x7f, 0x2d, 0x62, 0x6f, 0xcd, 0x22, 0xd7, 0x73, 0x87, 0x2b, 0xfe,
	0xed, 0xbd, 0xdd, 0xd6, 0x76, 0xbf, 0x35, 0x97, 0x68, 0xf5, 0x94, 0x3c, 0x18, 0xd4, 0xdd, 0xc4,
	0x32, 0x89, 0x2d, 0xeb, 0x36, 0x7c, 0xd8, 0x12, 0xa9, 0xb8, 0xaf, 0xf7, 0xcd, 0xb7, 0x66, 0xf2,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xfb, 0x57, 0x41, 0xc3, 0x05, 0x00, 0x00,
}
