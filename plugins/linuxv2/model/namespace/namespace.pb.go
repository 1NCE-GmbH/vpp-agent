// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespace.proto

/*
Package namespace is a generated protocol buffer package.

It is generated from these files:
	namespace.proto

It has these top-level messages:
	Namespace
*/
package namespace

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Namespace_NamespaceType int32

const (
	Namespace_PID_REF_NS          Namespace_NamespaceType = 0
	Namespace_MICROSERVICE_REF_NS Namespace_NamespaceType = 1
	Namespace_NAMED_NS            Namespace_NamespaceType = 2
	Namespace_FILE_REF_NS         Namespace_NamespaceType = 3
)

var Namespace_NamespaceType_name = map[int32]string{
	0: "PID_REF_NS",
	1: "MICROSERVICE_REF_NS",
	2: "NAMED_NS",
	3: "FILE_REF_NS",
}
var Namespace_NamespaceType_value = map[string]int32{
	"PID_REF_NS":          0,
	"MICROSERVICE_REF_NS": 1,
	"NAMED_NS":            2,
	"FILE_REF_NS":         3,
}

func (x Namespace_NamespaceType) String() string {
	return proto.EnumName(Namespace_NamespaceType_name, int32(x))
}
func (Namespace_NamespaceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNamespace, []int{0, 0}
}

type Namespace struct {
	Name string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type Namespace_NamespaceType `protobuf:"varint,2,opt,name=type,proto3,enum=namespace.Namespace_NamespaceType" json:"type,omitempty"`
	// based on the type, one of these must be defined:
	Pid          uint32 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	Microservice string `protobuf:"bytes,4,opt,name=microservice,proto3" json:"microservice,omitempty"`
	Filepath     string `protobuf:"bytes,5,opt,name=filepath,proto3" json:"filepath,omitempty"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{0} }

func (m *Namespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Namespace) GetType() Namespace_NamespaceType {
	if m != nil {
		return m.Type
	}
	return Namespace_PID_REF_NS
}

func (m *Namespace) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Namespace) GetMicroservice() string {
	if m != nil {
		return m.Microservice
	}
	return ""
}

func (m *Namespace) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func init() {
	proto.RegisterType((*Namespace)(nil), "namespace.Namespace")
	proto.RegisterEnum("namespace.Namespace_NamespaceType", Namespace_NamespaceType_name, Namespace_NamespaceType_value)
}

func init() { proto.RegisterFile("namespace.proto", fileDescriptorNamespace) }

var fileDescriptorNamespace = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4b, 0xcc, 0x4d,
	0x2d, 0x2e, 0x48, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x35, 0x31, 0x71, 0x71, 0xfa, 0xc1, 0x78, 0x42, 0x42, 0x5c, 0x2c, 0x20, 0x29, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0xc8, 0x8c, 0x8b, 0xa5, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x49,
	0x81, 0x51, 0x83, 0xcf, 0x48, 0x49, 0x0f, 0x61, 0x98, 0x1f, 0x26, 0x2b, 0xa4, 0xb2, 0x20, 0x35,
	0x08, 0xac, 0x5e, 0x48, 0x80, 0x8b, 0xb9, 0x20, 0x33, 0x45, 0x82, 0x59, 0x81, 0x51, 0x83, 0x37,
	0x08, 0xc4, 0x14, 0x52, 0xe2, 0xe2, 0xc9, 0xcd, 0x4c, 0x2e, 0xca, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0x95, 0x60, 0x01, 0xdb, 0x82, 0x22, 0x26, 0x24, 0xc5, 0xc5, 0x91, 0x96, 0x99, 0x93,
	0x5a, 0x90, 0x58, 0x92, 0x21, 0xc1, 0x0a, 0x96, 0x87, 0xf3, 0x95, 0xc2, 0xb9, 0x78, 0x51, 0x2c,
	0x12, 0xe2, 0xe3, 0xe2, 0x0a, 0xf0, 0x74, 0x89, 0x0f, 0x72, 0x75, 0x8b, 0xf7, 0x0b, 0x16, 0x60,
	0x10, 0x12, 0xe7, 0x12, 0xf6, 0xf5, 0x74, 0x0e, 0xf2, 0x0f, 0x76, 0x0d, 0x0a, 0xf3, 0x74, 0x76,
	0x85, 0x49, 0x30, 0x0a, 0xf1, 0x70, 0x71, 0xf8, 0x39, 0xfa, 0xba, 0xba, 0x80, 0x78, 0x4c, 0x42,
	0xfc, 0x5c, 0xdc, 0x6e, 0x9e, 0x3e, 0x70, 0x69, 0xe6, 0x24, 0x36, 0x70, 0xb0, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xea, 0xc1, 0x5b, 0xd3, 0x29, 0x01, 0x00, 0x00,
}
