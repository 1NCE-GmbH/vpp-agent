// Code generated by adapter-generator. DO NOT EDIT.

package adapter

import (
	"fmt"
	"github.com/ligato/cn-infra/datasync"
	. "github.com/ligato/cn-infra/kvscheduler/api"
	. "github.com/ligato/cn-infra/kvscheduler/value/protoval"
	"github.com/ligato/vpp-agent/plugins/linuxv2/model/l3"
)

////////// type-safe key-value pair with metadata //////////

type RouteKVWithMetadata struct {
	Key      string
	Value    *l3.LinuxStaticRoute
	Metadata interface{}
	Origin   ValueOrigin
}

////////// type-safe Descriptor interface //////////

type RouteDescriptorAPI interface {
	GetName() string
	KeySelector(key string) bool
	NBKeyPrefixes() []string
	WithMetadata() (withMeta bool, customMapFactory MetadataMapFactory)
	Build(key string, valueData *l3.LinuxStaticRoute) (value ProtoValue, err error)
	Add(key string, value *l3.LinuxStaticRoute) (metadata interface{}, err error)
	Delete(key string, value *l3.LinuxStaticRoute, metadata interface{}) error
	Modify(key string, oldValue, newValue *l3.LinuxStaticRoute, oldMetadata interface{}) (newMetadata interface{}, err error)
	ModifyHasToRecreate(key string, oldValue, newValue *l3.LinuxStaticRoute, metadata interface{}) bool
	Update(key string, value *l3.LinuxStaticRoute, metadata interface{}) error
	Dependencies(key string, value *l3.LinuxStaticRoute) []Dependency
	DerivedValues(key string, value *l3.LinuxStaticRoute) []KeyValuePair
	Dump(correlate []RouteKVWithMetadata) ([]RouteKVWithMetadata, error)
	DumpDependencies() []string
}

////////// Descriptor base implementation //////////

// RouteDescriptorBase provides default(=empty) implementations
// for all the methods to extend from.
type RouteDescriptorBase struct {
}

func (db *RouteDescriptorBase) GetName() string {
	return "base"
}

func (db *RouteDescriptorBase) KeySelector(key string) bool {
	return false
}

func (db *RouteDescriptorBase) NBKeyPrefixes() []string {
	return nil
}

func (db *RouteDescriptorBase) WithMetadata() (withMeta bool, customMapFactory MetadataMapFactory) {
	return false, nil
}

func (db *RouteDescriptorBase) Build(key string, valueData *l3.LinuxStaticRoute) (value ProtoValue, err error) {
	// You can override specific methods of ProtoValue using embedding:
	//
	//	type MyProtoValue struct {
	//		ProtoValue
	//      typedMsg *l3.LinuxStaticRoute
	//	}
	//	
	//	// ... (override some methods)
	//
	//  return &MyProtoValue{ProtoValue: NewProtoValue(valueData), typedMsg: valueData}	, nil
	return NewProtoValue(valueData), nil
}

func (db *RouteDescriptorBase) Add(key string, value *l3.LinuxStaticRoute) (metadata interface{}, err error) {
	fmt.Printf("Create for key=%s is not implemented\n", key)
	return nil, nil
}

func (db *RouteDescriptorBase) Delete(key string, value *l3.LinuxStaticRoute, metadata interface{}) error {
	fmt.Printf("Delete for key=%s is not implemented\n", key)
	return nil
}

func (db *RouteDescriptorBase) Modify(key string, oldValue, newValue *l3.LinuxStaticRoute, oldMetadata interface{}) (newMetadata interface{}, err error) {
	fmt.Printf("Modify for key=%s is not implemented\n", key)
	return nil, nil
}

func (db *RouteDescriptorBase) ModifyHasToRecreate(key string, oldValue, newValue *l3.LinuxStaticRoute, metadata interface{}) bool {
	return false
}

func (db *RouteDescriptorBase) Update(key string, value *l3.LinuxStaticRoute, metadata interface{}) error {
	fmt.Printf("Update for key=%s is not implemented\n", key)
	return nil
}

func (db *RouteDescriptorBase) Dependencies(key string, value *l3.LinuxStaticRoute) []Dependency {
	return nil
}

func (db *RouteDescriptorBase) DerivedValues(key string, value *l3.LinuxStaticRoute) []KeyValuePair {
	return nil
}

func (db *RouteDescriptorBase) Dump(correlate []RouteKVWithMetadata) ([]RouteKVWithMetadata, error) {
	fmt.Println("Dump is not implemented")
	return nil, nil
}

func (db *RouteDescriptorBase) DumpDependencies() []string {
	return nil
}

////////// Descriptor adapter //////////

type RouteDescriptorAdapter struct {
	descriptor RouteDescriptorAPI
}

func NewRouteDescriptor(impl RouteDescriptorAPI) KVDescriptor {
	return &RouteDescriptorAdapter{descriptor: impl}
}

func (da *RouteDescriptorAdapter) GetName() string {
	return da.descriptor.GetName()
}

func (da *RouteDescriptorAdapter) KeySelector(key string) bool {
	return da.descriptor.KeySelector(key)
}

func (da *RouteDescriptorAdapter) NBKeyPrefixes() []string {
	return da.descriptor.NBKeyPrefixes()
}

func (da *RouteDescriptorAdapter) WithMetadata() (withMeta bool, customMapFactory MetadataMapFactory) {
	return da.descriptor.WithMetadata()
}

func (da *RouteDescriptorAdapter) Build(key string, valueData interface{}) (value Value, err error) {
	typedValueData, err := castRouteValueData(key, valueData)
	if err != nil {
		return nil, err
	}
	return da.descriptor.Build(key, typedValueData)
}

func (da *RouteDescriptorAdapter) Add(key string, value Value) (metadata Metadata, err error) {
	typedValue, err := castRouteValue(key, value)
	if err != nil {
		return nil, err
	}
	return da.descriptor.Add(key, typedValue)
}

func (da *RouteDescriptorAdapter) Modify(key string, oldValue, newValue Value, oldMetadata Metadata) (newMetadata Metadata, err error) {
	oldTypedValue, err := castRouteValue(key, oldValue)
	if err != nil {
		return nil, err
	}
	newTypedValue, err := castRouteValue(key, newValue)
	if err != nil {
		return nil, err
	}
	typedOldMetadata, err := castRouteMetadata(key, oldMetadata)
	if err != nil {
		return nil, err
	}
	return da.descriptor.Modify(key, oldTypedValue, newTypedValue, typedOldMetadata)
}

func (da *RouteDescriptorAdapter) Delete(key string, value Value, metadata Metadata) error {
	typedValue, err := castRouteValue(key, value)
	if err != nil {
		return err
	}
	typedMetadata, err := castRouteMetadata(key, metadata)
	if err != nil {
		return err
	}
	return da.descriptor.Delete(key, typedValue, typedMetadata)
}

func (da *RouteDescriptorAdapter) ModifyHasToRecreate(key string, oldValue, newValue Value, metadata Metadata) bool {
	oldTypedValue, err := castRouteValue(key, oldValue)
	if err != nil {
		return true
	}
	newTypedValue, err := castRouteValue(key, newValue)
	if err != nil {
		return true
	}
	typedMetadata, err := castRouteMetadata(key, metadata)
	if err != nil {
		return true
	}
	return da.descriptor.ModifyHasToRecreate(key, oldTypedValue, newTypedValue, typedMetadata)
}

func (da *RouteDescriptorAdapter) Update(key string, value Value, metadata Metadata) error {
	typedValue, err := castRouteValue(key, value)
	if err != nil {
		return err
	}
	typedMetadata, err := castRouteMetadata(key, metadata)
	if err != nil {
		return err
	}
	return da.descriptor.Update(key, typedValue, typedMetadata)
}

func (da *RouteDescriptorAdapter) Dependencies(key string, value Value) []Dependency {
	typedValue, err := castRouteValue(key, value)
	if err != nil {
		return nil
	}
	return da.descriptor.Dependencies(key, typedValue)
}

func (da *RouteDescriptorAdapter) DerivedValues(key string, value Value) []KeyValuePair {
	typedValue, err := castRouteValue(key, value)
	if err != nil {
		return nil
	}
	return da.descriptor.DerivedValues(key, typedValue)
}

func (da *RouteDescriptorAdapter) Dump(correlate []KVWithMetadata) ([]KVWithMetadata, error) {
	var correlateWithType []RouteKVWithMetadata
	for _, kvpair := range correlate {
		typedValue, err := castRouteValue(kvpair.Key, kvpair.Value)
		if err != nil {
			continue
		}
		typedMetadata, err := castRouteMetadata(kvpair.Key, kvpair.Metadata)
		if err != nil {
			continue
		}
		correlateWithType = append(correlateWithType,
			RouteKVWithMetadata{
				Key:      kvpair.Key,
				Value:    typedValue,
				Metadata: typedMetadata,
				Origin:   kvpair.Origin,
			})
	}
	
	typedDump, err := da.descriptor.Dump(correlateWithType)
	if err != nil {
		return nil, err
	}
	var dump []KVWithMetadata
	for _, typedKVWithMetadata := range typedDump {
		kvWithMetadata := KVWithMetadata{
			Key:      typedKVWithMetadata.Key,
			Metadata: typedKVWithMetadata.Metadata,
			Origin:   typedKVWithMetadata.Origin,
			}
		value, err := da.descriptor.Build(typedKVWithMetadata.Key, typedKVWithMetadata.Value)
		if err != nil {
			return nil, err
		}
		kvWithMetadata.Value = value
		dump = append(dump, kvWithMetadata)
	}
	return dump, err
}

func (da *RouteDescriptorAdapter) DumpDependencies() []string {
	return da.descriptor.DumpDependencies()
}

////////// Helper methods //////////

func castRouteValueData(key string, valueData interface{}) (*l3.LinuxStaticRoute, error) {
	changeValue, isChange := valueData.(datasync.ChangeValue)
	if !isChange {
		return nil, ErrInvalidValueDataType(key)
	}
	protoMessage := &l3.LinuxStaticRoute{}
	err := changeValue.GetValue(protoMessage)
	if err != nil {
		return nil, err
	}
	return protoMessage, nil
}

func castRouteValue(key string, value Value) (*l3.LinuxStaticRoute, error) {
	protoValue, isProto := value.(ProtoValue)
	if !isProto {
		return nil, ErrInvalidValueType(key, value)
	}
	protoWithType, ok := protoValue.GetProtoMessage().(*l3.LinuxStaticRoute)
	if !ok {
		return nil, ErrInvalidValueType(key, value)
	}
	return protoWithType, nil
}

func castRouteMetadata(key string, metadata Metadata) (interface{}, error) {
	if metadata == nil {
		return nil, nil
	}
	typedMetadata, ok := metadata.(interface{})
	if !ok {
		return nil, ErrInvalidMetadataType(key)
	}
	return typedMetadata, nil
}
