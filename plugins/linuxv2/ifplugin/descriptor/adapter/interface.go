// Code generated by adapter-generator. DO NOT EDIT.

package adapter

import (
	"fmt"
	"github.com/ligato/cn-infra/datasync"
	. "github.com/ligato/cn-infra/kvscheduler/api"
	. "github.com/ligato/cn-infra/kvscheduler/value/protoval"
	"github.com/ligato/vpp-agent/plugins/linuxv2/ifplugin/ifaceidx"
	"github.com/ligato/vpp-agent/plugins/linuxv2/model/interfaces"
)

////////// type-safe key-value pair with metadata //////////

type InterfaceKVWithMetadata struct {
	Key      string
	Value    *interfaces.LinuxInterface
	Metadata *ifaceidx.LinuxIfMetadata
	Origin   ValueOrigin
}

////////// type-safe Descriptor interface //////////

type InterfaceDescriptorAPI interface {
	GetName() string
	KeySelector(key string) bool
	NBKeyPrefixes() []string
	WithMetadata() (withMeta bool, customMapFactory MetadataMapFactory)
	Build(key string, valueData *interfaces.LinuxInterface) (value ProtoValue, err error)
	Add(key string, value *interfaces.LinuxInterface) (metadata *ifaceidx.LinuxIfMetadata, err error)
	Delete(key string, value *interfaces.LinuxInterface, metadata *ifaceidx.LinuxIfMetadata) error
	Modify(key string, oldValue, newValue *interfaces.LinuxInterface, oldMetadata *ifaceidx.LinuxIfMetadata) (newMetadata *ifaceidx.LinuxIfMetadata, err error)
	ModifyHasToRecreate(key string, oldValue, newValue *interfaces.LinuxInterface, metadata *ifaceidx.LinuxIfMetadata) bool
	Update(key string, value *interfaces.LinuxInterface, metadata *ifaceidx.LinuxIfMetadata) error
	Dependencies(key string, value *interfaces.LinuxInterface) []Dependency
	DerivedValues(key string, value *interfaces.LinuxInterface) []KeyValuePair
	Dump(correlate []InterfaceKVWithMetadata) ([]InterfaceKVWithMetadata, error)
	DumpDependencies() []string
}

////////// Descriptor base implementation //////////

// InterfaceDescriptorBase provides default(=empty) implementations
// for all the methods to extend from.
type InterfaceDescriptorBase struct {
}

func (db *InterfaceDescriptorBase) GetName() string {
	return "base"
}

func (db *InterfaceDescriptorBase) KeySelector(key string) bool {
	return false
}

func (db *InterfaceDescriptorBase) NBKeyPrefixes() []string {
	return nil
}

func (db *InterfaceDescriptorBase) WithMetadata() (withMeta bool, customMapFactory MetadataMapFactory) {
	return false, nil
}

func (db *InterfaceDescriptorBase) Build(key string, valueData *interfaces.LinuxInterface) (value ProtoValue, err error) {
	// You can override specific methods of ProtoValue using embedding:
	//
	//	type MyProtoValue struct {
	//		ProtoValue
	//      typedMsg *interfaces.LinuxInterface
	//	}
	//
	//	// ... (override some methods)
	//
	//  return &MyProtoValue{ProtoValue: NewProtoValue(valueData), typedMsg: valueData}	, nil
	return NewProtoValue(valueData), nil
}

func (db *InterfaceDescriptorBase) Add(key string, value *interfaces.LinuxInterface) (metadata *ifaceidx.LinuxIfMetadata, err error) {
	fmt.Printf("Create for key=%s is not implemented\n", key)
	return nil, nil
}

func (db *InterfaceDescriptorBase) Delete(key string, value *interfaces.LinuxInterface, metadata *ifaceidx.LinuxIfMetadata) error {
	fmt.Printf("Delete for key=%s is not implemented\n", key)
	return nil
}

func (db *InterfaceDescriptorBase) Modify(key string, oldValue, newValue *interfaces.LinuxInterface, oldMetadata *ifaceidx.LinuxIfMetadata) (newMetadata *ifaceidx.LinuxIfMetadata, err error) {
	fmt.Printf("Modify for key=%s is not implemented\n", key)
	return nil, nil
}

func (db *InterfaceDescriptorBase) ModifyHasToRecreate(key string, oldValue, newValue *interfaces.LinuxInterface, metadata *ifaceidx.LinuxIfMetadata) bool {
	return false
}

func (db *InterfaceDescriptorBase) Update(key string, value *interfaces.LinuxInterface, metadata *ifaceidx.LinuxIfMetadata) error {
	fmt.Printf("Update for key=%s is not implemented\n", key)
	return nil
}

func (db *InterfaceDescriptorBase) Dependencies(key string, value *interfaces.LinuxInterface) []Dependency {
	return nil
}

func (db *InterfaceDescriptorBase) DerivedValues(key string, value *interfaces.LinuxInterface) []KeyValuePair {
	return nil
}

func (db *InterfaceDescriptorBase) Dump(correlate []InterfaceKVWithMetadata) ([]InterfaceKVWithMetadata, error) {
	fmt.Println("Dump is not implemented")
	return nil, nil
}

func (db *InterfaceDescriptorBase) DumpDependencies() []string {
	return nil
}

////////// Descriptor adapter //////////

type InterfaceDescriptorAdapter struct {
	descriptor InterfaceDescriptorAPI
}

func NewInterfaceDescriptor(impl InterfaceDescriptorAPI) KVDescriptor {
	return &InterfaceDescriptorAdapter{descriptor: impl}
}

func (da *InterfaceDescriptorAdapter) GetName() string {
	return da.descriptor.GetName()
}

func (da *InterfaceDescriptorAdapter) KeySelector(key string) bool {
	return da.descriptor.KeySelector(key)
}

func (da *InterfaceDescriptorAdapter) NBKeyPrefixes() []string {
	return da.descriptor.NBKeyPrefixes()
}

func (da *InterfaceDescriptorAdapter) WithMetadata() (withMeta bool, customMapFactory MetadataMapFactory) {
	return da.descriptor.WithMetadata()
}

func (da *InterfaceDescriptorAdapter) Build(key string, valueData interface{}) (value Value, err error) {
	typedValueData, err := castInterfaceValueData(key, valueData)
	if err != nil {
		return nil, err
	}
	return da.descriptor.Build(key, typedValueData)
}

func (da *InterfaceDescriptorAdapter) Add(key string, value Value) (metadata Metadata, err error) {
	typedValue, err := castInterfaceValue(key, value)
	if err != nil {
		return nil, err
	}
	return da.descriptor.Add(key, typedValue)
}

func (da *InterfaceDescriptorAdapter) Modify(key string, oldValue, newValue Value, oldMetadata Metadata) (newMetadata Metadata, err error) {
	oldTypedValue, err := castInterfaceValue(key, oldValue)
	if err != nil {
		return nil, err
	}
	newTypedValue, err := castInterfaceValue(key, newValue)
	if err != nil {
		return nil, err
	}
	typedOldMetadata, err := castInterfaceMetadata(key, oldMetadata)
	if err != nil {
		return nil, err
	}
	return da.descriptor.Modify(key, oldTypedValue, newTypedValue, typedOldMetadata)
}

func (da *InterfaceDescriptorAdapter) Delete(key string, value Value, metadata Metadata) error {
	typedValue, err := castInterfaceValue(key, value)
	if err != nil {
		return err
	}
	typedMetadata, err := castInterfaceMetadata(key, metadata)
	if err != nil {
		return err
	}
	return da.descriptor.Delete(key, typedValue, typedMetadata)
}

func (da *InterfaceDescriptorAdapter) ModifyHasToRecreate(key string, oldValue, newValue Value, metadata Metadata) bool {
	oldTypedValue, err := castInterfaceValue(key, oldValue)
	if err != nil {
		return true
	}
	newTypedValue, err := castInterfaceValue(key, newValue)
	if err != nil {
		return true
	}
	typedMetadata, err := castInterfaceMetadata(key, metadata)
	if err != nil {
		return true
	}
	return da.descriptor.ModifyHasToRecreate(key, oldTypedValue, newTypedValue, typedMetadata)
}

func (da *InterfaceDescriptorAdapter) Update(key string, value Value, metadata Metadata) error {
	typedValue, err := castInterfaceValue(key, value)
	if err != nil {
		return err
	}
	typedMetadata, err := castInterfaceMetadata(key, metadata)
	if err != nil {
		return err
	}
	return da.descriptor.Update(key, typedValue, typedMetadata)
}

func (da *InterfaceDescriptorAdapter) Dependencies(key string, value Value) []Dependency {
	typedValue, err := castInterfaceValue(key, value)
	if err != nil {
		return nil
	}
	return da.descriptor.Dependencies(key, typedValue)
}

func (da *InterfaceDescriptorAdapter) DerivedValues(key string, value Value) []KeyValuePair {
	typedValue, err := castInterfaceValue(key, value)
	if err != nil {
		return nil
	}
	return da.descriptor.DerivedValues(key, typedValue)
}

func (da *InterfaceDescriptorAdapter) Dump(correlate []KVWithMetadata) ([]KVWithMetadata, error) {
	var correlateWithType []InterfaceKVWithMetadata
	for _, kvpair := range correlate {
		typedValue, err := castInterfaceValue(kvpair.Key, kvpair.Value)
		if err != nil {
			continue
		}
		typedMetadata, err := castInterfaceMetadata(kvpair.Key, kvpair.Metadata)
		if err != nil {
			continue
		}
		correlateWithType = append(correlateWithType,
			InterfaceKVWithMetadata{
				Key:      kvpair.Key,
				Value:    typedValue,
				Metadata: typedMetadata,
				Origin:   kvpair.Origin,
			})
	}

	typedDump, err := da.descriptor.Dump(correlateWithType)
	if err != nil {
		return nil, err
	}
	var dump []KVWithMetadata
	for _, typedKVWithMetadata := range typedDump {
		kvWithMetadata := KVWithMetadata{
			Key:      typedKVWithMetadata.Key,
			Metadata: typedKVWithMetadata.Metadata,
			Origin:   typedKVWithMetadata.Origin,
		}
		value, err := da.descriptor.Build(typedKVWithMetadata.Key, typedKVWithMetadata.Value)
		if err != nil {
			return nil, err
		}
		kvWithMetadata.Value = value
		dump = append(dump, kvWithMetadata)
	}
	return dump, err
}

func (da *InterfaceDescriptorAdapter) DumpDependencies() []string {
	return da.descriptor.DumpDependencies()
}

////////// Helper methods //////////

func castInterfaceValueData(key string, valueData interface{}) (*interfaces.LinuxInterface, error) {
	changeValue, isChange := valueData.(datasync.ChangeValue)
	if !isChange {
		return nil, ErrInvalidValueDataType(key)
	}
	protoMessage := &interfaces.LinuxInterface{}
	err := changeValue.GetValue(protoMessage)
	if err != nil {
		return nil, err
	}
	return protoMessage, nil
}

func castInterfaceValue(key string, value Value) (*interfaces.LinuxInterface, error) {
	protoValue, isProto := value.(ProtoValue)
	if !isProto {
		return nil, ErrInvalidValueType(key, value)
	}
	protoWithType, ok := protoValue.GetProtoMessage().(*interfaces.LinuxInterface)
	if !ok {
		return nil, ErrInvalidValueType(key, value)
	}
	return protoWithType, nil
}

func castInterfaceMetadata(key string, metadata Metadata) (*ifaceidx.LinuxIfMetadata, error) {
	if metadata == nil {
		return nil, nil
	}
	typedMetadata, ok := metadata.(*ifaceidx.LinuxIfMetadata)
	if !ok {
		return nil, ErrInvalidMetadataType(key)
	}
	return typedMetadata, nil
}
