// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: punt.proto

package punt

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Punt_Protocol int32

const (
	Punt_UDP Punt_Protocol = 0
)

var Punt_Protocol_name = map[int32]string{
	0: "UDP",
}
var Punt_Protocol_value = map[string]int32{
	"UDP": 0,
}

func (x Punt_Protocol) String() string {
	return proto.EnumName(Punt_Protocol_name, int32(x))
}
func (Punt_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_punt_0ca583e11d951a94, []int{1, 0}
}

// IpRedirect allows otherwise dropped packet which destination IP address matching some of the VPP addresses
// to redirect to the defined next hop address via the TX interface
type IpRedirect struct {
	// TODO rx interface available in newer VPP api
	RxInterface          string   `protobuf:"bytes,1,opt,name=rx_interface,json=rxInterface,proto3" json:"rx_interface,omitempty"`
	TxInterface          string   `protobuf:"bytes,2,opt,name=tx_interface,json=txInterface,proto3" json:"tx_interface,omitempty"`
	NextHop              string   `protobuf:"bytes,3,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpRedirect) Reset()         { *m = IpRedirect{} }
func (m *IpRedirect) String() string { return proto.CompactTextString(m) }
func (*IpRedirect) ProtoMessage()    {}
func (*IpRedirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_punt_0ca583e11d951a94, []int{0}
}
func (m *IpRedirect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRedirect.Unmarshal(m, b)
}
func (m *IpRedirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRedirect.Marshal(b, m, deterministic)
}
func (dst *IpRedirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRedirect.Merge(dst, src)
}
func (m *IpRedirect) XXX_Size() int {
	return xxx_messageInfo_IpRedirect.Size(m)
}
func (m *IpRedirect) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRedirect.DiscardUnknown(m)
}

var xxx_messageInfo_IpRedirect proto.InternalMessageInfo

func (m *IpRedirect) GetRxInterface() string {
	if m != nil {
		return m.RxInterface
	}
	return ""
}

func (m *IpRedirect) GetTxInterface() string {
	if m != nil {
		return m.TxInterface
	}
	return ""
}

func (m *IpRedirect) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

// allows otherwise dropped packet which destination IP address matching some of the VPP addresses, provided protocols
// and port to be punted to the host
type Punt struct {
	IsIpv4               bool          `protobuf:"varint,1,opt,name=is_ipv4,json=isIpv4,proto3" json:"is_ipv4,omitempty"`
	Protocol             Punt_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=punt.Punt_Protocol" json:"protocol,omitempty"`
	Port                 uint32        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	SocketPath           string        `protobuf:"bytes,4,opt,name=socket_path,json=socketPath,proto3" json:"socket_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Punt) Reset()         { *m = Punt{} }
func (m *Punt) String() string { return proto.CompactTextString(m) }
func (*Punt) ProtoMessage()    {}
func (*Punt) Descriptor() ([]byte, []int) {
	return fileDescriptor_punt_0ca583e11d951a94, []int{1}
}
func (m *Punt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Punt.Unmarshal(m, b)
}
func (m *Punt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Punt.Marshal(b, m, deterministic)
}
func (dst *Punt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Punt.Merge(dst, src)
}
func (m *Punt) XXX_Size() int {
	return xxx_messageInfo_Punt.Size(m)
}
func (m *Punt) XXX_DiscardUnknown() {
	xxx_messageInfo_Punt.DiscardUnknown(m)
}

var xxx_messageInfo_Punt proto.InternalMessageInfo

func (m *Punt) GetIsIpv4() bool {
	if m != nil {
		return m.IsIpv4
	}
	return false
}

func (m *Punt) GetProtocol() Punt_Protocol {
	if m != nil {
		return m.Protocol
	}
	return Punt_UDP
}

func (m *Punt) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Punt) GetSocketPath() string {
	if m != nil {
		return m.SocketPath
	}
	return ""
}

func init() {
	proto.RegisterType((*IpRedirect)(nil), "punt.IpRedirect")
	proto.RegisterType((*Punt)(nil), "punt.Punt")
	proto.RegisterEnum("punt.Punt_Protocol", Punt_Protocol_name, Punt_Protocol_value)
}

func init() { proto.RegisterFile("punt.proto", fileDescriptor_punt_0ca583e11d951a94) }

var fileDescriptor_punt_0ca583e11d951a94 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xc1, 0x4e, 0xc3, 0x30,
	0x10, 0x44, 0x09, 0x8d, 0x1a, 0xb3, 0x05, 0x84, 0xb6, 0x07, 0xc2, 0x09, 0xc8, 0x89, 0x53, 0x91,
	0xa0, 0x9f, 0xc0, 0x81, 0xdc, 0x2c, 0x4b, 0x9c, 0xad, 0x60, 0x8c, 0x62, 0x01, 0xf6, 0xca, 0xd9,
	0x56, 0xf9, 0x16, 0xbe, 0x16, 0x65, 0x4b, 0xab, 0x5e, 0xac, 0xf5, 0xcc, 0xd3, 0xcc, 0x00, 0xd0,
	0x26, 0xf2, 0x8a, 0x72, 0xe2, 0x84, 0xe5, 0x74, 0x37, 0x3f, 0x00, 0x2d, 0x19, 0xff, 0x11, 0xb2,
	0x77, 0x8c, 0xf7, 0x70, 0x9e, 0x47, 0x1b, 0x22, 0xfb, 0xfc, 0xd9, 0x39, 0x5f, 0x17, 0x77, 0xc5,
	0xc3, 0x99, 0x59, 0xe4, 0xb1, 0xdd, 0x4b, 0x13, 0xc2, 0xc7, 0xc8, 0xe9, 0x0e, 0xe1, 0x23, 0xe4,
	0x06, 0x54, 0xf4, 0x23, 0xdb, 0x3e, 0x51, 0x3d, 0x13, 0xbb, 0x9a, 0xfe, 0xaf, 0x89, 0x9a, 0xdf,
	0x02, 0x4a, 0xbd, 0x89, 0x8c, 0xd7, 0x50, 0x85, 0xc1, 0x06, 0xda, 0xae, 0xa5, 0x44, 0x99, 0x79,
	0x18, 0x5a, 0xda, 0xae, 0xf1, 0x11, 0x94, 0xec, 0x73, 0xe9, 0x5b, 0xb2, 0x2f, 0x9f, 0x96, 0x2b,
	0x59, 0xad, 0xe5, 0xf9, 0xb7, 0xcc, 0x01, 0x42, 0x84, 0x92, 0x52, 0x66, 0x69, 0xba, 0x30, 0x72,
	0xe3, 0x2d, 0x2c, 0x86, 0xe4, 0xbe, 0x3c, 0x5b, 0xea, 0xb8, 0xaf, 0x4b, 0x19, 0x01, 0x3b, 0x49,
	0x77, 0xdc, 0x37, 0x4b, 0x50, 0xfb, 0x28, 0xac, 0x60, 0xf6, 0xf6, 0xa2, 0xaf, 0x4e, 0xde, 0xe7,
	0x92, 0xf9, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x85, 0x1c, 0xec, 0x26, 0x01, 0x00, 0x00,
}
