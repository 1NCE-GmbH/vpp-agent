syntax = "proto3";

package api;

option go_package = "github.com/ligato/vpp-agent/api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.messagename_all) = true;

import "google/protobuf/any.proto";

message Item {
    string key = 1;
    Value value = 2;
}

message Path {
    string prefix = 1;
    string name = 2;
}


message Value {
    google.protobuf.Any any = 1;
}

message ItemStatus {
    enum State {
        UNKNOWN = 0;
        PENDING = 1;
        APPLIED = 2;
        INVALID = 3;
        FAILED = 4;
        REMOVED = 5;
    }
    State state = 1;
    string message = 2;
}

//------------------------------------------------------------------------------

// Configurator defines the RPC methods for managing configuration.
service Configurator {
    // Capabilities returns information about service capabilities
    // including list of models supported by the server.
    rpc Capabilities (CapabilitiesRequest) returns (CapabilitiesResponse) {};

    // SetConfig is used to set desired configuration.
    // It returns status for items specified in the requests.
    rpc SetConfig (SetConfigRequest) returns (SetConfigResponse) {};

    // GetConfig returns desired configuration with item statuses.
    rpc GetConfig (GetConfigRequest) returns (GetConfigResponse) {};

    // DumpState retrieves the current running state.
    // The returned items also contain extra metadata not defined in models.
    rpc DumpState (DumpStateRequest) returns (DumpStateResponse) {};

    // Subscribe is used for subscribing to events.
    // Notifications are returned by streaming updates.
    rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse) {};
}

//------------------------------------------------------------------------------

message CapabilitiesRequest {
    // TODO: query filters
}

message CapabilitiesResponse {
    repeated Model known_models = 1;
    repeated string active_modules = 2;
}

message Model {
    string module = 1;
    string type = 2;
    string version = 3;
    map<string,string> meta = 4;
}

//------------------------------------------------------------------------------

message SetConfigRequest {
    message Options {
        bool resync = 1;
    }
    Options options = 1;

    message UpdateItem {
        Item item = 1;
        map<string,string> labels = 2;
    }
    repeated UpdateItem updates = 2;
}

message SetConfigResponse {
    repeated UpdateResult results = 1;
}

message UpdateResult {
    enum Operation {
        UNSPECIFIED = 0;
        CREATE = 1;
        UPDATE = 2;
        DELETE = 3;
    }
    string key = 1;
    ItemStatus status = 2;
    Operation op = 3;
}

//------------------------------------------------------------------------------

message GetConfigRequest {
    repeated string keys = 1;
    repeated string modules = 2;
}

message GetConfigResponse {
    message ConfigItem {
        Item item = 1;
        ItemStatus status = 2;
        map<string,string> labels = 3;
    }
    repeated ConfigItem items = 1;
}

//------------------------------------------------------------------------------

message DumpStateRequest {
    repeated string keys = 1;
    repeated string modules = 2;
}

message DumpStateResponse {
    message StateItem {
        Item item = 1;
        map<string, string> metadata = 2;
    }
    repeated StateItem states = 1;
}

//------------------------------------------------------------------------------

message SubscribeRequest {
    repeated Subscription subscriptions = 1;
}

message Subscription {
    string key = 1;
}

message SubscribeResponse {
    repeated Notification notifications = 1;
}

message Notification {
    Item item = 1;
    ItemStatus status = 2;
}
