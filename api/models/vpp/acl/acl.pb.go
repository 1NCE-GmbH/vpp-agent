// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vpp/acl/acl.proto

package vpp_acl // import "github.com/ligato/vpp-agent/api/models/vpp/acl"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Acl_Rule_Action int32

const (
	Acl_Rule_DENY    Acl_Rule_Action = 0
	Acl_Rule_PERMIT  Acl_Rule_Action = 1
	Acl_Rule_REFLECT Acl_Rule_Action = 2
)

var Acl_Rule_Action_name = map[int32]string{
	0: "DENY",
	1: "PERMIT",
	2: "REFLECT",
}
var Acl_Rule_Action_value = map[string]int32{
	"DENY":    0,
	"PERMIT":  1,
	"REFLECT": 2,
}

func (x Acl_Rule_Action) String() string {
	return proto.EnumName(Acl_Rule_Action_name, int32(x))
}
func (Acl_Rule_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0}
}

// Access Control List (ACL)
type Acl struct {
	// The name of an access list. A device MAY restrict the length
	// and value of this name, possibly spaces and special
	// characters are not allowed.
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rules                []*Acl_Rule     `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	Interfaces           *Acl_Interfaces `protobuf:"bytes,3,opt,name=interfaces" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Acl) Reset()         { *m = Acl{} }
func (m *Acl) String() string { return proto.CompactTextString(m) }
func (*Acl) ProtoMessage()    {}
func (*Acl) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0}
}
func (m *Acl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl.Unmarshal(m, b)
}
func (m *Acl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl.Marshal(b, m, deterministic)
}
func (dst *Acl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl.Merge(dst, src)
}
func (m *Acl) XXX_Size() int {
	return xxx_messageInfo_Acl.Size(m)
}
func (m *Acl) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl.DiscardUnknown(m)
}

var xxx_messageInfo_Acl proto.InternalMessageInfo

func (m *Acl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Acl) GetRules() []*Acl_Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Acl) GetInterfaces() *Acl_Interfaces {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// List of access list entries (Rules). Each Access Control Rule has
// a list of match criteria and a list of actions.
// Access List entry that can define:
// - IPv4/IPv6 src ip prefix
// - src MAC address mask
// - src MAC address value
// - can be used only for static ACLs.
type Acl_Rule struct {
	Action               Acl_Rule_Action     `protobuf:"varint,1,opt,name=action,proto3,enum=vpp.acl.Acl_Rule_Action" json:"action,omitempty"`
	IpRule               *Acl_Rule_IpRule    `protobuf:"bytes,2,opt,name=ip_rule,json=ipRule" json:"ip_rule,omitempty"`
	MacipRule            *Acl_Rule_MacIpRule `protobuf:"bytes,3,opt,name=macip_rule,json=macipRule" json:"macip_rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Acl_Rule) Reset()         { *m = Acl_Rule{} }
func (m *Acl_Rule) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule) ProtoMessage()    {}
func (*Acl_Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0}
}
func (m *Acl_Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule.Unmarshal(m, b)
}
func (m *Acl_Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule.Merge(dst, src)
}
func (m *Acl_Rule) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule.Size(m)
}
func (m *Acl_Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule proto.InternalMessageInfo

func (m *Acl_Rule) GetAction() Acl_Rule_Action {
	if m != nil {
		return m.Action
	}
	return Acl_Rule_DENY
}

func (m *Acl_Rule) GetIpRule() *Acl_Rule_IpRule {
	if m != nil {
		return m.IpRule
	}
	return nil
}

func (m *Acl_Rule) GetMacipRule() *Acl_Rule_MacIpRule {
	if m != nil {
		return m.MacipRule
	}
	return nil
}

type Acl_Rule_IpRule struct {
	Ip                   *Acl_Rule_IpRule_Ip   `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Icmp                 *Acl_Rule_IpRule_Icmp `protobuf:"bytes,2,opt,name=icmp" json:"icmp,omitempty"`
	Tcp                  *Acl_Rule_IpRule_Tcp  `protobuf:"bytes,3,opt,name=tcp" json:"tcp,omitempty"`
	Udp                  *Acl_Rule_IpRule_Udp  `protobuf:"bytes,4,opt,name=udp" json:"udp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Acl_Rule_IpRule) Reset()         { *m = Acl_Rule_IpRule{} }
func (m *Acl_Rule_IpRule) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_IpRule) ProtoMessage()    {}
func (*Acl_Rule_IpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0}
}
func (m *Acl_Rule_IpRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_IpRule.Unmarshal(m, b)
}
func (m *Acl_Rule_IpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_IpRule.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_IpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_IpRule.Merge(dst, src)
}
func (m *Acl_Rule_IpRule) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_IpRule.Size(m)
}
func (m *Acl_Rule_IpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_IpRule.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_IpRule proto.InternalMessageInfo

func (m *Acl_Rule_IpRule) GetIp() *Acl_Rule_IpRule_Ip {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Acl_Rule_IpRule) GetIcmp() *Acl_Rule_IpRule_Icmp {
	if m != nil {
		return m.Icmp
	}
	return nil
}

func (m *Acl_Rule_IpRule) GetTcp() *Acl_Rule_IpRule_Tcp {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *Acl_Rule_IpRule) GetUdp() *Acl_Rule_IpRule_Udp {
	if m != nil {
		return m.Udp
	}
	return nil
}

// IP  used in this Access List Entry.
type Acl_Rule_IpRule_Ip struct {
	// Destination IPv4/IPv6 network address (<ip>/<network>)
	DestinationNetwork string `protobuf:"bytes,1,opt,name=destination_network,json=destinationNetwork,proto3" json:"destination_network,omitempty"`
	// Destination IPv4/IPv6 network address (<ip>/<network>)
	SourceNetwork        string   `protobuf:"bytes,2,opt,name=source_network,json=sourceNetwork,proto3" json:"source_network,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_IpRule_Ip) Reset()         { *m = Acl_Rule_IpRule_Ip{} }
func (m *Acl_Rule_IpRule_Ip) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_IpRule_Ip) ProtoMessage()    {}
func (*Acl_Rule_IpRule_Ip) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0, 0}
}
func (m *Acl_Rule_IpRule_Ip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_IpRule_Ip.Unmarshal(m, b)
}
func (m *Acl_Rule_IpRule_Ip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_IpRule_Ip.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_IpRule_Ip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_IpRule_Ip.Merge(dst, src)
}
func (m *Acl_Rule_IpRule_Ip) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_IpRule_Ip.Size(m)
}
func (m *Acl_Rule_IpRule_Ip) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_IpRule_Ip.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_IpRule_Ip proto.InternalMessageInfo

func (m *Acl_Rule_IpRule_Ip) GetDestinationNetwork() string {
	if m != nil {
		return m.DestinationNetwork
	}
	return ""
}

func (m *Acl_Rule_IpRule_Ip) GetSourceNetwork() string {
	if m != nil {
		return m.SourceNetwork
	}
	return ""
}

type Acl_Rule_IpRule_Icmp struct {
	// ICMPv6 flag, if false ICMPv4 will be used
	Icmpv6 bool `protobuf:"varint,1,opt,name=icmpv6,proto3" json:"icmpv6,omitempty"`
	// Inclusive range representing icmp codes to be used.
	IcmpCodeRange        *Acl_Rule_IpRule_Icmp_Range `protobuf:"bytes,2,opt,name=icmp_code_range,json=icmpCodeRange" json:"icmp_code_range,omitempty"`
	IcmpTypeRange        *Acl_Rule_IpRule_Icmp_Range `protobuf:"bytes,3,opt,name=icmp_type_range,json=icmpTypeRange" json:"icmp_type_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Acl_Rule_IpRule_Icmp) Reset()         { *m = Acl_Rule_IpRule_Icmp{} }
func (m *Acl_Rule_IpRule_Icmp) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_IpRule_Icmp) ProtoMessage()    {}
func (*Acl_Rule_IpRule_Icmp) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0, 1}
}
func (m *Acl_Rule_IpRule_Icmp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_IpRule_Icmp.Unmarshal(m, b)
}
func (m *Acl_Rule_IpRule_Icmp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_IpRule_Icmp.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_IpRule_Icmp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_IpRule_Icmp.Merge(dst, src)
}
func (m *Acl_Rule_IpRule_Icmp) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_IpRule_Icmp.Size(m)
}
func (m *Acl_Rule_IpRule_Icmp) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_IpRule_Icmp.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_IpRule_Icmp proto.InternalMessageInfo

func (m *Acl_Rule_IpRule_Icmp) GetIcmpv6() bool {
	if m != nil {
		return m.Icmpv6
	}
	return false
}

func (m *Acl_Rule_IpRule_Icmp) GetIcmpCodeRange() *Acl_Rule_IpRule_Icmp_Range {
	if m != nil {
		return m.IcmpCodeRange
	}
	return nil
}

func (m *Acl_Rule_IpRule_Icmp) GetIcmpTypeRange() *Acl_Rule_IpRule_Icmp_Range {
	if m != nil {
		return m.IcmpTypeRange
	}
	return nil
}

type Acl_Rule_IpRule_Icmp_Range struct {
	First                uint32   `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Last                 uint32   `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_IpRule_Icmp_Range) Reset()         { *m = Acl_Rule_IpRule_Icmp_Range{} }
func (m *Acl_Rule_IpRule_Icmp_Range) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_IpRule_Icmp_Range) ProtoMessage()    {}
func (*Acl_Rule_IpRule_Icmp_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0, 1, 0}
}
func (m *Acl_Rule_IpRule_Icmp_Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_IpRule_Icmp_Range.Unmarshal(m, b)
}
func (m *Acl_Rule_IpRule_Icmp_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_IpRule_Icmp_Range.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_IpRule_Icmp_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_IpRule_Icmp_Range.Merge(dst, src)
}
func (m *Acl_Rule_IpRule_Icmp_Range) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_IpRule_Icmp_Range.Size(m)
}
func (m *Acl_Rule_IpRule_Icmp_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_IpRule_Icmp_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_IpRule_Icmp_Range proto.InternalMessageInfo

func (m *Acl_Rule_IpRule_Icmp_Range) GetFirst() uint32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Acl_Rule_IpRule_Icmp_Range) GetLast() uint32 {
	if m != nil {
		return m.Last
	}
	return 0
}

// Inclusive range representing destination ports to be used. When
// only lower-port is present, it represents a single port.
type Acl_Rule_IpRule_PortRange struct {
	LowerPort uint32 `protobuf:"varint,1,opt,name=lower_port,json=lowerPort,proto3" json:"lower_port,omitempty"`
	// If upper port is set, it must
	// be greater or equal to lower port
	UpperPort            uint32   `protobuf:"varint,2,opt,name=upper_port,json=upperPort,proto3" json:"upper_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_IpRule_PortRange) Reset()         { *m = Acl_Rule_IpRule_PortRange{} }
func (m *Acl_Rule_IpRule_PortRange) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_IpRule_PortRange) ProtoMessage()    {}
func (*Acl_Rule_IpRule_PortRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0, 2}
}
func (m *Acl_Rule_IpRule_PortRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_IpRule_PortRange.Unmarshal(m, b)
}
func (m *Acl_Rule_IpRule_PortRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_IpRule_PortRange.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_IpRule_PortRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_IpRule_PortRange.Merge(dst, src)
}
func (m *Acl_Rule_IpRule_PortRange) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_IpRule_PortRange.Size(m)
}
func (m *Acl_Rule_IpRule_PortRange) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_IpRule_PortRange.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_IpRule_PortRange proto.InternalMessageInfo

func (m *Acl_Rule_IpRule_PortRange) GetLowerPort() uint32 {
	if m != nil {
		return m.LowerPort
	}
	return 0
}

func (m *Acl_Rule_IpRule_PortRange) GetUpperPort() uint32 {
	if m != nil {
		return m.UpperPort
	}
	return 0
}

type Acl_Rule_IpRule_Tcp struct {
	DestinationPortRange *Acl_Rule_IpRule_PortRange `protobuf:"bytes,1,opt,name=destination_port_range,json=destinationPortRange" json:"destination_port_range,omitempty"`
	SourcePortRange      *Acl_Rule_IpRule_PortRange `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange" json:"source_port_range,omitempty"`
	// Binary mask for tcp flags to match. MSB order (FIN at position 0).
	// Applied as logical AND to tcp flags field of the packet being matched,
	// before it is compared with tcp-flags-value.
	TcpFlagsMask uint32 `protobuf:"varint,3,opt,name=tcp_flags_mask,json=tcpFlagsMask,proto3" json:"tcp_flags_mask,omitempty"`
	// Binary value for tcp flags to match. MSB order (FIN at position 0).
	// Before tcp-flags-value is compared with tcp flags field of the packet being matched,
	// tcp-flags-mask is applied to packet field value.
	TcpFlagsValue        uint32   `protobuf:"varint,4,opt,name=tcp_flags_value,json=tcpFlagsValue,proto3" json:"tcp_flags_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_IpRule_Tcp) Reset()         { *m = Acl_Rule_IpRule_Tcp{} }
func (m *Acl_Rule_IpRule_Tcp) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_IpRule_Tcp) ProtoMessage()    {}
func (*Acl_Rule_IpRule_Tcp) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0, 3}
}
func (m *Acl_Rule_IpRule_Tcp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_IpRule_Tcp.Unmarshal(m, b)
}
func (m *Acl_Rule_IpRule_Tcp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_IpRule_Tcp.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_IpRule_Tcp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_IpRule_Tcp.Merge(dst, src)
}
func (m *Acl_Rule_IpRule_Tcp) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_IpRule_Tcp.Size(m)
}
func (m *Acl_Rule_IpRule_Tcp) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_IpRule_Tcp.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_IpRule_Tcp proto.InternalMessageInfo

func (m *Acl_Rule_IpRule_Tcp) GetDestinationPortRange() *Acl_Rule_IpRule_PortRange {
	if m != nil {
		return m.DestinationPortRange
	}
	return nil
}

func (m *Acl_Rule_IpRule_Tcp) GetSourcePortRange() *Acl_Rule_IpRule_PortRange {
	if m != nil {
		return m.SourcePortRange
	}
	return nil
}

func (m *Acl_Rule_IpRule_Tcp) GetTcpFlagsMask() uint32 {
	if m != nil {
		return m.TcpFlagsMask
	}
	return 0
}

func (m *Acl_Rule_IpRule_Tcp) GetTcpFlagsValue() uint32 {
	if m != nil {
		return m.TcpFlagsValue
	}
	return 0
}

type Acl_Rule_IpRule_Udp struct {
	DestinationPortRange *Acl_Rule_IpRule_PortRange `protobuf:"bytes,1,opt,name=destination_port_range,json=destinationPortRange" json:"destination_port_range,omitempty"`
	SourcePortRange      *Acl_Rule_IpRule_PortRange `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange" json:"source_port_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Acl_Rule_IpRule_Udp) Reset()         { *m = Acl_Rule_IpRule_Udp{} }
func (m *Acl_Rule_IpRule_Udp) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_IpRule_Udp) ProtoMessage()    {}
func (*Acl_Rule_IpRule_Udp) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 0, 4}
}
func (m *Acl_Rule_IpRule_Udp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_IpRule_Udp.Unmarshal(m, b)
}
func (m *Acl_Rule_IpRule_Udp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_IpRule_Udp.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_IpRule_Udp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_IpRule_Udp.Merge(dst, src)
}
func (m *Acl_Rule_IpRule_Udp) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_IpRule_Udp.Size(m)
}
func (m *Acl_Rule_IpRule_Udp) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_IpRule_Udp.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_IpRule_Udp proto.InternalMessageInfo

func (m *Acl_Rule_IpRule_Udp) GetDestinationPortRange() *Acl_Rule_IpRule_PortRange {
	if m != nil {
		return m.DestinationPortRange
	}
	return nil
}

func (m *Acl_Rule_IpRule_Udp) GetSourcePortRange() *Acl_Rule_IpRule_PortRange {
	if m != nil {
		return m.SourcePortRange
	}
	return nil
}

type Acl_Rule_MacIpRule struct {
	SourceAddress       string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceAddressPrefix uint32 `protobuf:"varint,2,opt,name=source_address_prefix,json=sourceAddressPrefix,proto3" json:"source_address_prefix,omitempty"`
	// Before source-mac-address is compared with source mac address field of the packet
	// being matched, source-mac-address-mask is applied to packet field value.
	SourceMacAddress string `protobuf:"bytes,3,opt,name=source_mac_address,json=sourceMacAddress,proto3" json:"source_mac_address,omitempty"`
	// Source MAC address mask.
	// Applied as logical AND with source mac address field of the packet being matched,
	// before it is compared with source-mac-address.
	SourceMacAddressMask string   `protobuf:"bytes,4,opt,name=source_mac_address_mask,json=sourceMacAddressMask,proto3" json:"source_mac_address_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_MacIpRule) Reset()         { *m = Acl_Rule_MacIpRule{} }
func (m *Acl_Rule_MacIpRule) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_MacIpRule) ProtoMessage()    {}
func (*Acl_Rule_MacIpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 0, 1}
}
func (m *Acl_Rule_MacIpRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_MacIpRule.Unmarshal(m, b)
}
func (m *Acl_Rule_MacIpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_MacIpRule.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_MacIpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_MacIpRule.Merge(dst, src)
}
func (m *Acl_Rule_MacIpRule) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_MacIpRule.Size(m)
}
func (m *Acl_Rule_MacIpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_MacIpRule.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_MacIpRule proto.InternalMessageInfo

func (m *Acl_Rule_MacIpRule) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *Acl_Rule_MacIpRule) GetSourceAddressPrefix() uint32 {
	if m != nil {
		return m.SourceAddressPrefix
	}
	return 0
}

func (m *Acl_Rule_MacIpRule) GetSourceMacAddress() string {
	if m != nil {
		return m.SourceMacAddress
	}
	return ""
}

func (m *Acl_Rule_MacIpRule) GetSourceMacAddressMask() string {
	if m != nil {
		return m.SourceMacAddressMask
	}
	return ""
}

// The set of interfaces that has assigned this ACL on ingres or egress.
type Acl_Interfaces struct {
	Egress               []string `protobuf:"bytes,1,rep,name=egress" json:"egress,omitempty"`
	Ingress              []string `protobuf:"bytes,2,rep,name=ingress" json:"ingress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Interfaces) Reset()         { *m = Acl_Interfaces{} }
func (m *Acl_Interfaces) String() string { return proto.CompactTextString(m) }
func (*Acl_Interfaces) ProtoMessage()    {}
func (*Acl_Interfaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_da70c27d8c993b96, []int{0, 1}
}
func (m *Acl_Interfaces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Interfaces.Unmarshal(m, b)
}
func (m *Acl_Interfaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Interfaces.Marshal(b, m, deterministic)
}
func (dst *Acl_Interfaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Interfaces.Merge(dst, src)
}
func (m *Acl_Interfaces) XXX_Size() int {
	return xxx_messageInfo_Acl_Interfaces.Size(m)
}
func (m *Acl_Interfaces) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Interfaces.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Interfaces proto.InternalMessageInfo

func (m *Acl_Interfaces) GetEgress() []string {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *Acl_Interfaces) GetIngress() []string {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func init() {
	proto.RegisterType((*Acl)(nil), "vpp.acl.Acl")
	proto.RegisterType((*Acl_Rule)(nil), "vpp.acl.Acl.Rule")
	proto.RegisterType((*Acl_Rule_IpRule)(nil), "vpp.acl.Acl.Rule.IpRule")
	proto.RegisterType((*Acl_Rule_IpRule_Ip)(nil), "vpp.acl.Acl.Rule.IpRule.Ip")
	proto.RegisterType((*Acl_Rule_IpRule_Icmp)(nil), "vpp.acl.Acl.Rule.IpRule.Icmp")
	proto.RegisterType((*Acl_Rule_IpRule_Icmp_Range)(nil), "vpp.acl.Acl.Rule.IpRule.Icmp.Range")
	proto.RegisterType((*Acl_Rule_IpRule_PortRange)(nil), "vpp.acl.Acl.Rule.IpRule.PortRange")
	proto.RegisterType((*Acl_Rule_IpRule_Tcp)(nil), "vpp.acl.Acl.Rule.IpRule.Tcp")
	proto.RegisterType((*Acl_Rule_IpRule_Udp)(nil), "vpp.acl.Acl.Rule.IpRule.Udp")
	proto.RegisterType((*Acl_Rule_MacIpRule)(nil), "vpp.acl.Acl.Rule.MacIpRule")
	proto.RegisterType((*Acl_Interfaces)(nil), "vpp.acl.Acl.Interfaces")
	proto.RegisterEnum("vpp.acl.Acl_Rule_Action", Acl_Rule_Action_name, Acl_Rule_Action_value)
}

func init() { proto.RegisterFile("vpp/acl/acl.proto", fileDescriptor_acl_da70c27d8c993b96) }

var fileDescriptor_acl_da70c27d8c993b96 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x5b, 0x4f, 0x13, 0x4f,
	0x14, 0xff, 0xef, 0x6e, 0x69, 0xe9, 0x29, 0x85, 0x32, 0xf0, 0x87, 0x66, 0xff, 0x7f, 0x12, 0x82,
	0xb7, 0x26, 0xe8, 0x56, 0x6a, 0x44, 0xa3, 0x89, 0x49, 0xc5, 0x92, 0x34, 0x5a, 0x42, 0x26, 0xc5,
	0xa8, 0x31, 0xd9, 0x0c, 0xb3, 0xd3, 0xba, 0x61, 0x2f, 0x93, 0xdd, 0x6d, 0x91, 0x8f, 0xe1, 0x27,
	0xf1, 0xcd, 0x2f, 0xe1, 0x47, 0xf1, 0xd5, 0x57, 0x13, 0x33, 0x97, 0x6d, 0x8b, 0x80, 0x97, 0x47,
	0x1f, 0x9a, 0xce, 0x9c, 0xdf, 0x65, 0xce, 0x99, 0x33, 0x33, 0x0b, 0xcb, 0x63, 0xce, 0x9b, 0x84,
	0x06, 0xe2, 0xe7, 0xf0, 0x24, 0xce, 0x62, 0x54, 0x1a, 0x73, 0xee, 0x10, 0x1a, 0x6c, 0x7d, 0x5d,
	0x00, 0xab, 0x4d, 0x03, 0x84, 0xa0, 0x10, 0x91, 0x90, 0xd5, 0x8d, 0x4d, 0xa3, 0x51, 0xc6, 0x72,
	0x8c, 0x6e, 0xc1, 0x5c, 0x32, 0x0a, 0x58, 0x5a, 0x37, 0x37, 0xad, 0x46, 0xa5, 0xb5, 0xec, 0x68,
	0x91, 0xd3, 0xa6, 0x81, 0x83, 0x47, 0x01, 0xc3, 0x0a, 0x47, 0x0f, 0x00, 0xfc, 0x28, 0x63, 0xc9,
	0x80, 0x50, 0x96, 0xd6, 0xad, 0x4d, 0xa3, 0x51, 0x69, 0xad, 0x9f, 0x63, 0x77, 0x27, 0x30, 0x9e,
	0xa1, 0xda, 0x9f, 0x2a, 0x50, 0x10, 0x46, 0xe8, 0x2e, 0x14, 0x09, 0xcd, 0xfc, 0x38, 0x92, 0x09,
	0x2c, 0xb6, 0xea, 0x17, 0xd6, 0x72, 0xda, 0x12, 0xc7, 0x9a, 0x87, 0x76, 0xa0, 0xe4, 0x73, 0x57,
	0xac, 0x5f, 0x37, 0xe5, 0x82, 0x97, 0x48, 0xba, 0x5c, 0x66, 0x59, 0xf4, 0xe5, 0x3f, 0x7a, 0x04,
	0x10, 0x12, 0x9a, 0xab, 0x54, 0x9a, 0xff, 0x5d, 0x54, 0xf5, 0x08, 0xd5, 0xc2, 0xb2, 0xa4, 0x8b,
	0xa1, 0xfd, 0x61, 0x1e, 0x8a, 0x2a, 0x8a, 0xb6, 0xc1, 0xf4, 0xb9, 0xcc, 0xf3, 0x52, 0xb9, 0x62,
	0x89, 0x3f, 0xd3, 0xe7, 0x68, 0x07, 0x0a, 0x3e, 0x0d, 0xb9, 0xce, 0x71, 0xe3, 0x6a, 0x3a, 0x0d,
	0x39, 0x96, 0x54, 0xe4, 0x80, 0x95, 0x51, 0xae, 0xf3, 0xfb, 0xff, 0x4a, 0x45, 0x9f, 0x72, 0x2c,
	0x88, 0x82, 0x3f, 0xf2, 0x78, 0xbd, 0xf0, 0x0b, 0xfe, 0x91, 0xc7, 0xb1, 0x20, 0xda, 0x6f, 0xc1,
	0xec, 0x72, 0xd4, 0x84, 0x15, 0x8f, 0xa5, 0x99, 0x1f, 0x11, 0xb1, 0x9d, 0x6e, 0xc4, 0xb2, 0xd3,
	0x38, 0x39, 0xd1, 0xfd, 0x47, 0x33, 0xd0, 0x81, 0x42, 0xd0, 0x0d, 0x58, 0x4c, 0xe3, 0x51, 0x42,
	0xd9, 0x84, 0x6b, 0x4a, 0x6e, 0x55, 0x45, 0x35, 0xcd, 0xfe, 0x62, 0x40, 0x41, 0x14, 0x83, 0xd6,
	0xa0, 0x28, 0xca, 0x19, 0xef, 0x4a, 0xcf, 0x79, 0xac, 0x67, 0xe8, 0x39, 0x2c, 0x89, 0x91, 0x4b,
	0x63, 0x8f, 0xb9, 0x09, 0x89, 0x86, 0x79, 0x03, 0xaf, 0xfd, 0x74, 0x73, 0x1c, 0x2c, 0xa8, 0xb8,
	0x2a, 0xb4, 0x7b, 0xb1, 0xc7, 0xe4, 0x74, 0x62, 0x96, 0x9d, 0xf1, 0xdc, 0xcc, 0xfa, 0x43, 0xb3,
	0xfe, 0x19, 0x57, 0x66, 0xf6, 0x0e, 0xcc, 0x29, 0xd7, 0x55, 0x98, 0x1b, 0xf8, 0x49, 0x9a, 0xc9,
	0xcc, 0xab, 0x58, 0x4d, 0xc4, 0x15, 0x09, 0x48, 0x9a, 0xc9, 0x6c, 0xab, 0x58, 0x8e, 0xed, 0x2e,
	0x94, 0x0f, 0xe3, 0x24, 0x53, 0xb2, 0x0d, 0x80, 0x20, 0x3e, 0x65, 0x89, 0xcb, 0xe3, 0x24, 0xd7,
	0x96, 0x65, 0x44, 0x70, 0x04, 0x3c, 0xe2, 0x3c, 0x87, 0x95, 0x4b, 0x59, 0x46, 0x04, 0x6c, 0x7f,
	0x33, 0xc0, 0xea, 0x53, 0x8e, 0x5e, 0xc1, 0xda, 0x6c, 0x63, 0x04, 0x59, 0x57, 0xa6, 0x8e, 0xdc,
	0xd6, 0x95, 0x95, 0x4d, 0x32, 0xc1, 0xab, 0x33, 0x0e, 0xd3, 0xfc, 0x0e, 0x60, 0x59, 0x77, 0x70,
	0xc6, 0xd4, 0xfc, 0x6d, 0xd3, 0x25, 0x25, 0x9e, 0xfa, 0x5d, 0x87, 0xc5, 0x8c, 0x72, 0x77, 0x10,
	0x90, 0x61, 0xea, 0x86, 0x24, 0x3d, 0x91, 0x7b, 0x5f, 0xc5, 0x0b, 0x19, 0xe5, 0xfb, 0x22, 0xd8,
	0x23, 0xe9, 0x09, 0xba, 0x09, 0x4b, 0x53, 0xd6, 0x98, 0x04, 0x23, 0x26, 0x8f, 0x6a, 0x15, 0x57,
	0x73, 0xda, 0x4b, 0x11, 0xb4, 0x3f, 0x1a, 0x60, 0x1d, 0x79, 0x7f, 0x51, 0xfd, 0xf6, 0x67, 0x03,
	0xca, 0x93, 0xc7, 0x62, 0xe6, 0x7e, 0x10, 0xcf, 0x4b, 0x58, 0x9a, 0xea, 0xbb, 0xa4, 0xef, 0x47,
	0x5b, 0x05, 0x51, 0x0b, 0xfe, 0x3d, 0x4f, 0x73, 0x79, 0xc2, 0x06, 0xfe, 0x7b, 0x7d, 0x20, 0x56,
	0xce, 0xb1, 0x0f, 0x25, 0x84, 0x6e, 0x03, 0xd2, 0x9a, 0x90, 0xd0, 0x89, 0xbd, 0x25, 0xed, 0x6b,
	0x0a, 0xe9, 0x11, 0x9a, 0xaf, 0x70, 0x1f, 0xd6, 0x2f, 0xb2, 0x55, 0x7f, 0x0a, 0x52, 0xb2, 0xfa,
	0xa3, 0x44, 0xf4, 0x69, 0x6b, 0x1b, 0x8a, 0xea, 0x89, 0x45, 0xf3, 0x50, 0x78, 0xd6, 0x39, 0x78,
	0x5d, 0xfb, 0x07, 0x01, 0x14, 0x0f, 0x3b, 0xb8, 0xd7, 0xed, 0xd7, 0x0c, 0x54, 0x81, 0x12, 0xee,
	0xec, 0xbf, 0xe8, 0xec, 0xf5, 0x6b, 0xa6, 0xfd, 0x04, 0x60, 0xfa, 0xa4, 0x8b, 0xab, 0xce, 0x86,
	0xba, 0x64, 0xab, 0x51, 0xc6, 0x7a, 0x86, 0xea, 0x50, 0xf2, 0x23, 0x05, 0x98, 0x12, 0xc8, 0xa7,
	0x4f, 0x1f, 0xbe, 0xd9, 0x1d, 0xfa, 0xd9, 0xbb, 0xd1, 0xb1, 0x43, 0xe3, 0xb0, 0x19, 0xf8, 0x43,
	0x92, 0xc5, 0xcd, 0x31, 0xe7, 0x77, 0xc8, 0x90, 0x45, 0x59, 0x93, 0x70, 0xbf, 0x19, 0xc6, 0x1e,
	0x0b, 0xd2, 0xa6, 0xfe, 0x76, 0x3d, 0x1e, 0x73, 0xee, 0x12, 0x1a, 0x1c, 0x17, 0xe5, 0x07, 0xec,
	0xde, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xb7, 0x72, 0x85, 0xd5, 0x06, 0x00, 0x00,
}
